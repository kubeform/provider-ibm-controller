/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type VpcAlb struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpcAlbSpec   `json:"spec,omitempty"`
	Status            VpcAlbStatus `json:"status,omitempty"`
}

type VpcAlbSpec struct {
	State *VpcAlbSpecResource `json:"state,omitempty" tf:"-"`

	Resource VpcAlbSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type VpcAlbSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// ALB ID
	AlbID *string `json:"albID" tf:"alb_id"`
	// Type of the ALB
	// +optional
	AlbType *string `json:"albType,omitempty" tf:"alb_type"`
	// cluster id
	// +optional
	Cluster *string `json:"cluster,omitempty" tf:"cluster"`
	// Disable the ALB instance in the cluster
	// +optional
	DisableDeployment *bool `json:"disableDeployment,omitempty" tf:"disable_deployment"`
	// Enable the ALB instance in the cluster
	// +optional
	Enable *bool `json:"enable,omitempty" tf:"enable"`
	// Load balancer host name
	// +optional
	LoadBalancerHostname *string `json:"loadBalancerHostname,omitempty" tf:"load_balancer_hostname"`
	// ALB name
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// boolean value to resize the albs
	// +optional
	Resize *bool `json:"resize,omitempty" tf:"resize"`
	// ALB state
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// Status of the ALB
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// Zone info.
	// +optional
	Zone *string `json:"zone,omitempty" tf:"zone"`
}

type VpcAlbStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VpcAlbList is a list of VpcAlbs
type VpcAlbList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of VpcAlb CRD objects
	Items []VpcAlb `json:"items,omitempty"`
}
