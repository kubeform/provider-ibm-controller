/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type WorkerPool struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkerPoolSpec   `json:"spec,omitempty"`
	Status            WorkerPoolStatus `json:"status,omitempty"`
}

type WorkerPoolSpecTaints struct {
	// Effect for taint. Accepted values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `json:"effect" tf:"effect"`
	// Key for taint
	Key *string `json:"key" tf:"key"`
	// Value for taint.
	Value *string `json:"value" tf:"value"`
}

type WorkerPoolSpecZones struct {
	// +optional
	PrivateVLAN *string `json:"privateVLAN,omitempty" tf:"private_vlan"`
	// +optional
	PublicVLAN *string `json:"publicVLAN,omitempty" tf:"public_vlan"`
	// +optional
	WorkerCount *int64 `json:"workerCount,omitempty" tf:"worker_count"`
	// +optional
	Zone *string `json:"zone,omitempty" tf:"zone"`
}

type WorkerPoolSpec struct {
	State *WorkerPoolSpecResource `json:"state,omitempty" tf:"-"`

	Resource WorkerPoolSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type WorkerPoolSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Cluster name
	Cluster *string `json:"cluster" tf:"cluster"`
	// worker node disk encrypted if set to true
	// +optional
	DiskEncryption *bool `json:"diskEncryption,omitempty" tf:"disk_encryption"`
	// Entitlement option reduces additional OCP Licence cost in Openshift Clusters
	// +optional
	Entitlement *string `json:"entitlement,omitempty" tf:"entitlement"`
	// Hardware type
	// +optional
	Hardware *string `json:"hardware,omitempty" tf:"hardware"`
	// list of labels to worker pool
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// worker nodes machine type
	MachineType *string `json:"machineType" tf:"machine_type"`
	// The worker pool region
	// +optional
	// Deprecated
	Region *string `json:"region,omitempty" tf:"region"`
	// The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
	// +optional
	ResourceControllerURL *string `json:"resourceControllerURL,omitempty" tf:"resource_controller_url"`
	// ID of the resource group.
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
	// Number of nodes per zone
	SizePerZone *int64 `json:"sizePerZone" tf:"size_per_zone"`
	// worker pool state
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// WorkerPool Taints
	// +optional
	Taints []WorkerPoolSpecTaints `json:"taints,omitempty" tf:"taints"`
	// worker pool name
	WorkerPoolName *string `json:"workerPoolName" tf:"worker_pool_name"`
	// +optional
	Zones []WorkerPoolSpecZones `json:"zones,omitempty" tf:"zones"`
}

type WorkerPoolStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// WorkerPoolList is a list of WorkerPools
type WorkerPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of WorkerPool CRD objects
	Items []WorkerPool `json:"items,omitempty"`
}
