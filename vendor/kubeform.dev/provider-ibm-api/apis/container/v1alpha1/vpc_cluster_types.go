/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type VpcCluster struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpcClusterSpec   `json:"spec,omitempty"`
	Status            VpcClusterStatus `json:"status,omitempty"`
}

type VpcClusterSpecAlbs struct {
	// +optional
	AlbType *string `json:"albType,omitempty" tf:"alb_type"`
	// +optional
	DisableDeployment *bool `json:"disableDeployment,omitempty" tf:"disable_deployment"`
	// +optional
	Enable *bool `json:"enable,omitempty" tf:"enable"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	LoadBalancerHostname *string `json:"loadBalancerHostname,omitempty" tf:"load_balancer_hostname"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Resize *bool `json:"resize,omitempty" tf:"resize"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
}

type VpcClusterSpecKmsConfig struct {
	// ID of the customer root key.
	CrkID *string `json:"crkID" tf:"crk_id"`
	// ID of the KMS instance to use to encrypt the cluster.
	InstanceID *string `json:"instanceID" tf:"instance_id"`
	// Specify this option to use the KMS public service endpoint.
	// +optional
	PrivateEndpoint *bool `json:"privateEndpoint,omitempty" tf:"private_endpoint"`
}

type VpcClusterSpecTaints struct {
	// Effect for taint. Accepted values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `json:"effect" tf:"effect"`
	// Key for taint
	Key *string `json:"key" tf:"key"`
	// Value for taint.
	Value *string `json:"value" tf:"value"`
}

type VpcClusterSpecZones struct {
	// Zone for the worker pool in a multizone cluster
	Name *string `json:"name" tf:"name"`
	// The VPC subnet to assign the cluster
	SubnetID *string `json:"subnetID" tf:"subnet_id"`
}

type VpcClusterSpec struct {
	State *VpcClusterSpecResource `json:"state,omitempty" tf:"-"`

	Resource VpcClusterSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type VpcClusterSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Albs []VpcClusterSpecAlbs `json:"albs,omitempty" tf:"albs"`
	// A standard cloud object storage instance CRN to back up the internal registry in your OpenShift on VPC Gen 2 cluster
	// +optional
	CosInstanceCrn *string `json:"cosInstanceCrn,omitempty" tf:"cos_instance_crn"`
	// CRN of resource instance
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// Boolean value true if Public service endpoint to be disabled
	// +optional
	DisablePublicServiceEndpoint *bool `json:"disablePublicServiceEndpoint,omitempty" tf:"disable_public_service_endpoint"`
	// Entitlement option reduces additional OCP Licence cost in Openshift Clusters
	// +optional
	Entitlement *string `json:"entitlement,omitempty" tf:"entitlement"`
	// Cluster nodes flavour
	Flavor *string `json:"flavor" tf:"flavor"`
	// Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
	// +optional
	ForceDeleteStorage *bool `json:"forceDeleteStorage,omitempty" tf:"force_delete_storage"`
	// +optional
	IngressHostname *string `json:"ingressHostname,omitempty" tf:"ingress_hostname"`
	// +optional
	IngressSecret *string `json:"-" sensitive:"true" tf:"ingress_secret"`
	// Enables KMS on a given cluster
	// +optional
	KmsConfig *VpcClusterSpecKmsConfig `json:"kmsConfig,omitempty" tf:"kms_config"`
	// Kubernetes version
	// +optional
	KubeVersion *string `json:"kubeVersion,omitempty" tf:"kube_version"`
	// +optional
	MasterStatus *string `json:"masterStatus,omitempty" tf:"master_status"`
	// +optional
	MasterURL *string `json:"masterURL,omitempty" tf:"master_url"`
	// The cluster name
	Name *string `json:"name" tf:"name"`
	// Kubernetes patch version
	// +optional
	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version"`
	// Custom subnet CIDR to provide private IP addresses for pods
	// +optional
	PodSubnet *string `json:"podSubnet,omitempty" tf:"pod_subnet"`
	// +optional
	PrivateServiceEndpointURL *string `json:"privateServiceEndpointURL,omitempty" tf:"private_service_endpoint_url"`
	// +optional
	PublicServiceEndpointURL *string `json:"publicServiceEndpointURL,omitempty" tf:"public_service_endpoint_url"`
	// The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
	// +optional
	ResourceControllerURL *string `json:"resourceControllerURL,omitempty" tf:"resource_controller_url"`
	// The crn of the resource
	// +optional
	ResourceCrn *string `json:"resourceCrn,omitempty" tf:"resource_crn"`
	// ID of the resource group.
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
	// The resource group name in which resource is provisioned
	// +optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name"`
	// The name of the resource
	// +optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name"`
	// The status of the resource
	// +optional
	ResourceStatus *string `json:"resourceStatus,omitempty" tf:"resource_status"`
	// Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates if the previous apply fails
	// +optional
	RetryPatchVersion *int64 `json:"retryPatchVersion,omitempty" tf:"retry_patch_version"`
	// Custom subnet CIDR to provide private IP addresses for services
	// +optional
	ServiceSubnet *string `json:"serviceSubnet,omitempty" tf:"service_subnet"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// List of tags for the resources
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// WorkerPool Taints
	// +optional
	Taints []VpcClusterSpecTaints `json:"taints,omitempty" tf:"taints"`
	// Updates all the woker nodes if sets to true
	// +optional
	UpdateAllWorkers *bool `json:"updateAllWorkers,omitempty" tf:"update_all_workers"`
	// The vpc id where the cluster is
	VpcID *string `json:"vpcID" tf:"vpc_id"`
	// Wait for worker node to update during kube version update.
	// +optional
	WaitForWorkerUpdate *bool `json:"waitForWorkerUpdate,omitempty" tf:"wait_for_worker_update"`
	// wait_till can be configured for Master Ready, One worker Ready or Ingress Ready
	// +optional
	WaitTill *string `json:"waitTill,omitempty" tf:"wait_till"`
	// Number of worker nodes in the cluster
	// +optional
	WorkerCount *int64 `json:"workerCount,omitempty" tf:"worker_count"`
	// Labels for default worker pool
	// +optional
	WorkerLabels *map[string]string `json:"workerLabels,omitempty" tf:"worker_labels"`
	// Zone info
	Zones []VpcClusterSpecZones `json:"zones" tf:"zones"`
}

type VpcClusterStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VpcClusterList is a list of VpcClusters
type VpcClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of VpcCluster CRD objects
	Items []VpcCluster `json:"items,omitempty"`
}
