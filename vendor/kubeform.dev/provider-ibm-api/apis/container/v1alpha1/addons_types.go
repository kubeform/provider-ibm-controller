/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Addons struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AddonsSpec   `json:"spec,omitempty"`
	Status            AddonsStatus `json:"status,omitempty"`
}

type AddonsSpecAddons struct {
	// The versions that the addon can be upgraded to
	// +optional
	AllowedUpgradeVersions []string `json:"allowedUpgradeVersions,omitempty" tf:"allowed_upgrade_versions"`
	// Determines if this addon version is deprecated
	// +optional
	Deprecated *bool `json:"deprecated,omitempty" tf:"deprecated"`
	// The health state for this addon, a short indication (e.g. critical, pending)
	// +optional
	HealthState *string `json:"healthState,omitempty" tf:"health_state"`
	// The health status for this addon, provides a description of the state (e.g. error message)
	// +optional
	HealthStatus *string `json:"healthStatus,omitempty" tf:"health_status"`
	// The minimum kubernetes version for this addon.
	// +optional
	MinKubeVersion *string `json:"minKubeVersion,omitempty" tf:"min_kube_version"`
	// The minimum OpenShift version for this addon.
	// +optional
	MinOcpVersion *string `json:"minOcpVersion,omitempty" tf:"min_ocp_version"`
	// The addon name such as 'istio'.
	Name *string `json:"name" tf:"name"`
	// The supported kubernetes version range for this addon.
	// +optional
	SupportedKubeRange *string `json:"supportedKubeRange,omitempty" tf:"supported_kube_range"`
	// The addon target version.
	// +optional
	TargetVersion *string `json:"targetVersion,omitempty" tf:"target_version"`
	// The addon version, omit the version if you wish to use the default version.
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
	// VLAN spanning required for multi-zone clusters
	// +optional
	VlanSpanningRequired *bool `json:"vlanSpanningRequired,omitempty" tf:"vlan_spanning_required"`
}

type AddonsSpec struct {
	State *AddonsSpecResource `json:"state,omitempty" tf:"-"`

	Resource AddonsSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type AddonsSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Addons []AddonsSpecAddons `json:"addons" tf:"addons"`
	// Cluster Name or ID
	Cluster *string `json:"cluster" tf:"cluster"`
	// ID of the resource group.
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
}

type AddonsStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AddonsList is a list of Addonss
type AddonsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Addons CRD objects
	Items []Addons `json:"items,omitempty"`
}
