/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ClusterFeature struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterFeatureSpec   `json:"spec,omitempty"`
	Status            ClusterFeatureStatus `json:"status,omitempty"`
}

type ClusterFeatureSpec struct {
	State *ClusterFeatureSpecResource `json:"state,omitempty" tf:"-"`

	Resource ClusterFeatureSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ClusterFeatureSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Cluster name of ID
	Cluster *string `json:"cluster" tf:"cluster"`
	// +optional
	PrivateServiceEndpoint *bool `json:"privateServiceEndpoint,omitempty" tf:"private_service_endpoint"`
	// +optional
	PrivateServiceEndpointURL *string `json:"privateServiceEndpointURL,omitempty" tf:"private_service_endpoint_url"`
	// +optional
	PublicServiceEndpoint *bool `json:"publicServiceEndpoint,omitempty" tf:"public_service_endpoint"`
	// +optional
	PublicServiceEndpointURL *string `json:"publicServiceEndpointURL,omitempty" tf:"public_service_endpoint_url"`
	// Boolean value true of API server to be refreshed in K8S cluster
	// +optional
	RefreshAPIServers *bool `json:"refreshAPIServers,omitempty" tf:"refresh_api_servers"`
	// Boolean value set true if worker nodes to be reloaded
	// +optional
	ReloadWorkers *bool `json:"reloadWorkers,omitempty" tf:"reload_workers"`
	// ID of the resource group.
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
}

type ClusterFeatureStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ClusterFeatureList is a list of ClusterFeatures
type ClusterFeatureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ClusterFeature CRD objects
	Items []ClusterFeature `json:"items,omitempty"`
}
