/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Vpn struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpnSpec   `json:"spec,omitempty"`
	Status            VpnStatus `json:"status,omitempty"`
}

type VpnSpecAddressTranslation struct {
	InternalIPAdress *string `json:"internalIPAdress" tf:"internal_ip_adress"`
	// +optional
	Notes          *string `json:"notes,omitempty" tf:"notes"`
	RemoteIPAdress *string `json:"remoteIPAdress" tf:"remote_ip_adress"`
}

type VpnSpecPhaseOne struct {
	// +optional
	Authentication *string `json:"authentication,omitempty" tf:"authentication"`
	// +optional
	DiffieHellmanGroup *int64 `json:"diffieHellmanGroup,omitempty" tf:"diffie_hellman_group"`
	// +optional
	Encryption *string `json:"encryption,omitempty" tf:"encryption"`
	// +optional
	Keylife *int64 `json:"keylife,omitempty" tf:"keylife"`
}

type VpnSpecPhaseTwo struct {
	// +optional
	Authentication *string `json:"authentication,omitempty" tf:"authentication"`
	// +optional
	DiffieHellmanGroup *int64 `json:"diffieHellmanGroup,omitempty" tf:"diffie_hellman_group"`
	// +optional
	Encryption *string `json:"encryption,omitempty" tf:"encryption"`
	// +optional
	Keylife *int64 `json:"keylife,omitempty" tf:"keylife"`
}

type VpnSpecRemoteSubnet struct {
	// +optional
	AccountID      *int64  `json:"accountID,omitempty" tf:"account_id"`
	RemoteIPAdress *string `json:"remoteIPAdress" tf:"remote_ip_adress"`
	RemoteIPCIDR   *string `json:"remoteIPCIDR" tf:"remote_ip_cidr"`
}

type VpnSpec struct {
	State *VpnSpecResource `json:"state,omitempty" tf:"-"`

	Resource VpnSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type VpnSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AddressTranslation *VpnSpecAddressTranslation `json:"addressTranslation,omitempty" tf:"address_translation"`
	// Customer Peer IP Address
	// +optional
	CustomerPeerIP *string `json:"customerPeerIP,omitempty" tf:"customer_peer_ip"`
	// Datacenter name
	Datacenter *string `json:"datacenter" tf:"datacenter"`
	// +optional
	InternalPeerIPAddress *string `json:"internalPeerIPAddress,omitempty" tf:"internal_peer_ip_address"`
	// Internal subnet ID value
	// +optional
	InternalSubnetID *int64 `json:"internalSubnetID,omitempty" tf:"internal_subnet_id"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	PhaseOne *VpnSpecPhaseOne `json:"phaseOne,omitempty" tf:"phase_one"`
	// +optional
	PhaseTwo *VpnSpecPhaseTwo `json:"phaseTwo,omitempty" tf:"phase_two"`
	// Preshared Key data
	// +optional
	PresharedKey *string `json:"presharedKey,omitempty" tf:"preshared_key"`
	// +optional
	RemoteSubnet *VpnSpecRemoteSubnet `json:"remoteSubnet,omitempty" tf:"remote_subnet"`
	// Remote subnet ID value
	// +optional
	RemoteSubnetID *int64 `json:"remoteSubnetID,omitempty" tf:"remote_subnet_id"`
	// Service subnet ID value
	// +optional
	ServiceSubnetID *int64 `json:"serviceSubnetID,omitempty" tf:"service_subnet_id"`
}

type VpnStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VpnList is a list of Vpns
type VpnList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Vpn CRD objects
	Items []Vpn `json:"items,omitempty"`
}
