/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScaling{}).Type1()):       DatabaseSpecAutoScalingCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingCpu{}).Type1()):    DatabaseSpecAutoScalingCpuCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingDisk{}).Type1()):   DatabaseSpecAutoScalingDiskCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingMemory{}).Type1()): DatabaseSpecAutoScalingMemoryCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScaling{}).Type1()):       DatabaseSpecAutoScalingCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingCpu{}).Type1()):    DatabaseSpecAutoScalingCpuCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingDisk{}).Type1()):   DatabaseSpecAutoScalingDiskCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingMemory{}).Type1()): DatabaseSpecAutoScalingMemoryCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DatabaseSpecAutoScalingCodec struct {
}

func (DatabaseSpecAutoScalingCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseSpecAutoScaling)(ptr) == nil
}

func (DatabaseSpecAutoScalingCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseSpecAutoScaling)(ptr)
	var objs []DatabaseSpecAutoScaling
	if obj != nil {
		objs = []DatabaseSpecAutoScaling{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScaling{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseSpecAutoScalingCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseSpecAutoScaling)(ptr) = DatabaseSpecAutoScaling{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseSpecAutoScaling

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScaling{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseSpecAutoScaling)(ptr) = objs[0]
			} else {
				*(*DatabaseSpecAutoScaling)(ptr) = DatabaseSpecAutoScaling{}
			}
		} else {
			*(*DatabaseSpecAutoScaling)(ptr) = DatabaseSpecAutoScaling{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DatabaseSpecAutoScaling

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScaling{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DatabaseSpecAutoScaling)(ptr) = obj
		} else {
			*(*DatabaseSpecAutoScaling)(ptr) = DatabaseSpecAutoScaling{}
		}
	default:
		iter.ReportError("decode DatabaseSpecAutoScaling", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseSpecAutoScalingCpuCodec struct {
}

func (DatabaseSpecAutoScalingCpuCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseSpecAutoScalingCpu)(ptr) == nil
}

func (DatabaseSpecAutoScalingCpuCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseSpecAutoScalingCpu)(ptr)
	var objs []DatabaseSpecAutoScalingCpu
	if obj != nil {
		objs = []DatabaseSpecAutoScalingCpu{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingCpu{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseSpecAutoScalingCpuCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseSpecAutoScalingCpu)(ptr) = DatabaseSpecAutoScalingCpu{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseSpecAutoScalingCpu

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingCpu{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseSpecAutoScalingCpu)(ptr) = objs[0]
			} else {
				*(*DatabaseSpecAutoScalingCpu)(ptr) = DatabaseSpecAutoScalingCpu{}
			}
		} else {
			*(*DatabaseSpecAutoScalingCpu)(ptr) = DatabaseSpecAutoScalingCpu{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DatabaseSpecAutoScalingCpu

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingCpu{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DatabaseSpecAutoScalingCpu)(ptr) = obj
		} else {
			*(*DatabaseSpecAutoScalingCpu)(ptr) = DatabaseSpecAutoScalingCpu{}
		}
	default:
		iter.ReportError("decode DatabaseSpecAutoScalingCpu", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseSpecAutoScalingDiskCodec struct {
}

func (DatabaseSpecAutoScalingDiskCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseSpecAutoScalingDisk)(ptr) == nil
}

func (DatabaseSpecAutoScalingDiskCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseSpecAutoScalingDisk)(ptr)
	var objs []DatabaseSpecAutoScalingDisk
	if obj != nil {
		objs = []DatabaseSpecAutoScalingDisk{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingDisk{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseSpecAutoScalingDiskCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseSpecAutoScalingDisk)(ptr) = DatabaseSpecAutoScalingDisk{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseSpecAutoScalingDisk

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingDisk{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseSpecAutoScalingDisk)(ptr) = objs[0]
			} else {
				*(*DatabaseSpecAutoScalingDisk)(ptr) = DatabaseSpecAutoScalingDisk{}
			}
		} else {
			*(*DatabaseSpecAutoScalingDisk)(ptr) = DatabaseSpecAutoScalingDisk{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DatabaseSpecAutoScalingDisk

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingDisk{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DatabaseSpecAutoScalingDisk)(ptr) = obj
		} else {
			*(*DatabaseSpecAutoScalingDisk)(ptr) = DatabaseSpecAutoScalingDisk{}
		}
	default:
		iter.ReportError("decode DatabaseSpecAutoScalingDisk", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseSpecAutoScalingMemoryCodec struct {
}

func (DatabaseSpecAutoScalingMemoryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseSpecAutoScalingMemory)(ptr) == nil
}

func (DatabaseSpecAutoScalingMemoryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseSpecAutoScalingMemory)(ptr)
	var objs []DatabaseSpecAutoScalingMemory
	if obj != nil {
		objs = []DatabaseSpecAutoScalingMemory{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingMemory{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseSpecAutoScalingMemoryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseSpecAutoScalingMemory)(ptr) = DatabaseSpecAutoScalingMemory{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseSpecAutoScalingMemory

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingMemory{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseSpecAutoScalingMemory)(ptr) = objs[0]
			} else {
				*(*DatabaseSpecAutoScalingMemory)(ptr) = DatabaseSpecAutoScalingMemory{}
			}
		} else {
			*(*DatabaseSpecAutoScalingMemory)(ptr) = DatabaseSpecAutoScalingMemory{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DatabaseSpecAutoScalingMemory

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecAutoScalingMemory{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DatabaseSpecAutoScalingMemory)(ptr) = obj
		} else {
			*(*DatabaseSpecAutoScalingMemory)(ptr) = DatabaseSpecAutoScalingMemory{}
		}
	default:
		iter.ReportError("decode DatabaseSpecAutoScalingMemory", "unexpected JSON type")
	}
}
