//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "kubeform.dev/apimachinery/api/v1alpha1"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	apiv1 "kmodules.xyz/client-go/api/v1"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Database) DeepCopyInto(out *Database) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Database.
func (in *Database) DeepCopy() *Database {
	if in == nil {
		return nil
	}
	out := new(Database)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Database) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseList) DeepCopyInto(out *DatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Database, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseList.
func (in *DatabaseList) DeepCopy() *DatabaseList {
	if in == nil {
		return nil
	}
	out := new(DatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpec) DeepCopyInto(out *DatabaseSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(DatabaseSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpec.
func (in *DatabaseSpec) DeepCopy() *DatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpecAutoScaling) DeepCopyInto(out *DatabaseSpecAutoScaling) {
	*out = *in
	if in.Cpu != nil {
		in, out := &in.Cpu, &out.Cpu
		*out = new(DatabaseSpecAutoScalingCpu)
		(*in).DeepCopyInto(*out)
	}
	if in.Disk != nil {
		in, out := &in.Disk, &out.Disk
		*out = new(DatabaseSpecAutoScalingDisk)
		(*in).DeepCopyInto(*out)
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(DatabaseSpecAutoScalingMemory)
		(*in).DeepCopyInto(*out)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpecAutoScaling.
func (in *DatabaseSpecAutoScaling) DeepCopy() *DatabaseSpecAutoScaling {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpecAutoScaling)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpecAutoScalingCpu) DeepCopyInto(out *DatabaseSpecAutoScalingCpu) {
	*out = *in
	if in.RateIncreasePercent != nil {
		in, out := &in.RateIncreasePercent, &out.RateIncreasePercent
		*out = new(int64)
		**out = **in
	}
	if in.RateLimitCountPerMember != nil {
		in, out := &in.RateLimitCountPerMember, &out.RateLimitCountPerMember
		*out = new(int64)
		**out = **in
	}
	if in.RatePeriodSeconds != nil {
		in, out := &in.RatePeriodSeconds, &out.RatePeriodSeconds
		*out = new(int64)
		**out = **in
	}
	if in.RateUnits != nil {
		in, out := &in.RateUnits, &out.RateUnits
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpecAutoScalingCpu.
func (in *DatabaseSpecAutoScalingCpu) DeepCopy() *DatabaseSpecAutoScalingCpu {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpecAutoScalingCpu)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpecAutoScalingDisk) DeepCopyInto(out *DatabaseSpecAutoScalingDisk) {
	*out = *in
	if in.CapacityEnabled != nil {
		in, out := &in.CapacityEnabled, &out.CapacityEnabled
		*out = new(bool)
		**out = **in
	}
	if in.FreeSpaceLessThanPercent != nil {
		in, out := &in.FreeSpaceLessThanPercent, &out.FreeSpaceLessThanPercent
		*out = new(int64)
		**out = **in
	}
	if in.IoAbovePercent != nil {
		in, out := &in.IoAbovePercent, &out.IoAbovePercent
		*out = new(int64)
		**out = **in
	}
	if in.IoEnabled != nil {
		in, out := &in.IoEnabled, &out.IoEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IoOverPeriod != nil {
		in, out := &in.IoOverPeriod, &out.IoOverPeriod
		*out = new(string)
		**out = **in
	}
	if in.RateIncreasePercent != nil {
		in, out := &in.RateIncreasePercent, &out.RateIncreasePercent
		*out = new(int64)
		**out = **in
	}
	if in.RateLimitMbPerMember != nil {
		in, out := &in.RateLimitMbPerMember, &out.RateLimitMbPerMember
		*out = new(int64)
		**out = **in
	}
	if in.RatePeriodSeconds != nil {
		in, out := &in.RatePeriodSeconds, &out.RatePeriodSeconds
		*out = new(int64)
		**out = **in
	}
	if in.RateUnits != nil {
		in, out := &in.RateUnits, &out.RateUnits
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpecAutoScalingDisk.
func (in *DatabaseSpecAutoScalingDisk) DeepCopy() *DatabaseSpecAutoScalingDisk {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpecAutoScalingDisk)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpecAutoScalingMemory) DeepCopyInto(out *DatabaseSpecAutoScalingMemory) {
	*out = *in
	if in.IoAbovePercent != nil {
		in, out := &in.IoAbovePercent, &out.IoAbovePercent
		*out = new(int64)
		**out = **in
	}
	if in.IoEnabled != nil {
		in, out := &in.IoEnabled, &out.IoEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IoOverPeriod != nil {
		in, out := &in.IoOverPeriod, &out.IoOverPeriod
		*out = new(string)
		**out = **in
	}
	if in.RateIncreasePercent != nil {
		in, out := &in.RateIncreasePercent, &out.RateIncreasePercent
		*out = new(int64)
		**out = **in
	}
	if in.RateLimitMbPerMember != nil {
		in, out := &in.RateLimitMbPerMember, &out.RateLimitMbPerMember
		*out = new(int64)
		**out = **in
	}
	if in.RatePeriodSeconds != nil {
		in, out := &in.RatePeriodSeconds, &out.RatePeriodSeconds
		*out = new(int64)
		**out = **in
	}
	if in.RateUnits != nil {
		in, out := &in.RateUnits, &out.RateUnits
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpecAutoScalingMemory.
func (in *DatabaseSpecAutoScalingMemory) DeepCopy() *DatabaseSpecAutoScalingMemory {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpecAutoScalingMemory)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpecConnectionstrings) DeepCopyInto(out *DatabaseSpecConnectionstrings) {
	*out = *in
	if in.Certbase64 != nil {
		in, out := &in.Certbase64, &out.Certbase64
		*out = new(string)
		**out = **in
	}
	if in.Certname != nil {
		in, out := &in.Certname, &out.Certname
		*out = new(string)
		**out = **in
	}
	if in.Composed != nil {
		in, out := &in.Composed, &out.Composed
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.Hosts != nil {
		in, out := &in.Hosts, &out.Hosts
		*out = make([]DatabaseSpecConnectionstringsHosts, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Queryoptions != nil {
		in, out := &in.Queryoptions, &out.Queryoptions
		*out = new(string)
		**out = **in
	}
	if in.Scheme != nil {
		in, out := &in.Scheme, &out.Scheme
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpecConnectionstrings.
func (in *DatabaseSpecConnectionstrings) DeepCopy() *DatabaseSpecConnectionstrings {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpecConnectionstrings)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpecConnectionstringsHosts) DeepCopyInto(out *DatabaseSpecConnectionstringsHosts) {
	*out = *in
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpecConnectionstringsHosts.
func (in *DatabaseSpecConnectionstringsHosts) DeepCopy() *DatabaseSpecConnectionstringsHosts {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpecConnectionstringsHosts)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpecGroups) DeepCopyInto(out *DatabaseSpecGroups) {
	*out = *in
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(int64)
		**out = **in
	}
	if in.Cpu != nil {
		in, out := &in.Cpu, &out.Cpu
		*out = make([]DatabaseSpecGroupsCpu, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Disk != nil {
		in, out := &in.Disk, &out.Disk
		*out = make([]DatabaseSpecGroupsDisk, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GroupID != nil {
		in, out := &in.GroupID, &out.GroupID
		*out = new(string)
		**out = **in
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = make([]DatabaseSpecGroupsMemory, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpecGroups.
func (in *DatabaseSpecGroups) DeepCopy() *DatabaseSpecGroups {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpecGroups)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpecGroupsCpu) DeepCopyInto(out *DatabaseSpecGroupsCpu) {
	*out = *in
	if in.AllocationCount != nil {
		in, out := &in.AllocationCount, &out.AllocationCount
		*out = new(int64)
		**out = **in
	}
	if in.CanScaleDown != nil {
		in, out := &in.CanScaleDown, &out.CanScaleDown
		*out = new(bool)
		**out = **in
	}
	if in.IsAdjustable != nil {
		in, out := &in.IsAdjustable, &out.IsAdjustable
		*out = new(bool)
		**out = **in
	}
	if in.MinimumCount != nil {
		in, out := &in.MinimumCount, &out.MinimumCount
		*out = new(int64)
		**out = **in
	}
	if in.StepSizeCount != nil {
		in, out := &in.StepSizeCount, &out.StepSizeCount
		*out = new(int64)
		**out = **in
	}
	if in.Units != nil {
		in, out := &in.Units, &out.Units
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpecGroupsCpu.
func (in *DatabaseSpecGroupsCpu) DeepCopy() *DatabaseSpecGroupsCpu {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpecGroupsCpu)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpecGroupsDisk) DeepCopyInto(out *DatabaseSpecGroupsDisk) {
	*out = *in
	if in.AllocationMb != nil {
		in, out := &in.AllocationMb, &out.AllocationMb
		*out = new(int64)
		**out = **in
	}
	if in.CanScaleDown != nil {
		in, out := &in.CanScaleDown, &out.CanScaleDown
		*out = new(bool)
		**out = **in
	}
	if in.IsAdjustable != nil {
		in, out := &in.IsAdjustable, &out.IsAdjustable
		*out = new(bool)
		**out = **in
	}
	if in.MinimumMb != nil {
		in, out := &in.MinimumMb, &out.MinimumMb
		*out = new(int64)
		**out = **in
	}
	if in.StepSizeMb != nil {
		in, out := &in.StepSizeMb, &out.StepSizeMb
		*out = new(int64)
		**out = **in
	}
	if in.Units != nil {
		in, out := &in.Units, &out.Units
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpecGroupsDisk.
func (in *DatabaseSpecGroupsDisk) DeepCopy() *DatabaseSpecGroupsDisk {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpecGroupsDisk)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpecGroupsMemory) DeepCopyInto(out *DatabaseSpecGroupsMemory) {
	*out = *in
	if in.AllocationMb != nil {
		in, out := &in.AllocationMb, &out.AllocationMb
		*out = new(int64)
		**out = **in
	}
	if in.CanScaleDown != nil {
		in, out := &in.CanScaleDown, &out.CanScaleDown
		*out = new(bool)
		**out = **in
	}
	if in.IsAdjustable != nil {
		in, out := &in.IsAdjustable, &out.IsAdjustable
		*out = new(bool)
		**out = **in
	}
	if in.MinimumMb != nil {
		in, out := &in.MinimumMb, &out.MinimumMb
		*out = new(int64)
		**out = **in
	}
	if in.StepSizeMb != nil {
		in, out := &in.StepSizeMb, &out.StepSizeMb
		*out = new(int64)
		**out = **in
	}
	if in.Units != nil {
		in, out := &in.Units, &out.Units
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpecGroupsMemory.
func (in *DatabaseSpecGroupsMemory) DeepCopy() *DatabaseSpecGroupsMemory {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpecGroupsMemory)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpecResource) DeepCopyInto(out *DatabaseSpecResource) {
	*out = *in
	if in.Timeouts != nil {
		in, out := &in.Timeouts, &out.Timeouts
		*out = new(apiv1alpha1.ResourceTimeout)
		(*in).DeepCopyInto(*out)
	}
	if in.Adminpassword != nil {
		in, out := &in.Adminpassword, &out.Adminpassword
		*out = new(string)
		**out = **in
	}
	if in.Adminuser != nil {
		in, out := &in.Adminuser, &out.Adminuser
		*out = new(string)
		**out = **in
	}
	if in.AutoScaling != nil {
		in, out := &in.AutoScaling, &out.AutoScaling
		*out = new(DatabaseSpecAutoScaling)
		(*in).DeepCopyInto(*out)
	}
	if in.BackupEncryptionKeyCrn != nil {
		in, out := &in.BackupEncryptionKeyCrn, &out.BackupEncryptionKeyCrn
		*out = new(string)
		**out = **in
	}
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.Connectionstrings != nil {
		in, out := &in.Connectionstrings, &out.Connectionstrings
		*out = make([]DatabaseSpecConnectionstrings, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]DatabaseSpecGroups, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Guid != nil {
		in, out := &in.Guid, &out.Guid
		*out = new(string)
		**out = **in
	}
	if in.KeyProtectInstance != nil {
		in, out := &in.KeyProtectInstance, &out.KeyProtectInstance
		*out = new(string)
		**out = **in
	}
	if in.KeyProtectKey != nil {
		in, out := &in.KeyProtectKey, &out.KeyProtectKey
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.MembersCPUAllocationCount != nil {
		in, out := &in.MembersCPUAllocationCount, &out.MembersCPUAllocationCount
		*out = new(int64)
		**out = **in
	}
	if in.MembersDiskAllocationMb != nil {
		in, out := &in.MembersDiskAllocationMb, &out.MembersDiskAllocationMb
		*out = new(int64)
		**out = **in
	}
	if in.MembersMemoryAllocationMb != nil {
		in, out := &in.MembersMemoryAllocationMb, &out.MembersMemoryAllocationMb
		*out = new(int64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(int64)
		**out = **in
	}
	if in.NodeCPUAllocationCount != nil {
		in, out := &in.NodeCPUAllocationCount, &out.NodeCPUAllocationCount
		*out = new(int64)
		**out = **in
	}
	if in.NodeDiskAllocationMb != nil {
		in, out := &in.NodeDiskAllocationMb, &out.NodeDiskAllocationMb
		*out = new(int64)
		**out = **in
	}
	if in.NodeMemoryAllocationMb != nil {
		in, out := &in.NodeMemoryAllocationMb, &out.NodeMemoryAllocationMb
		*out = new(int64)
		**out = **in
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.PlanValidation != nil {
		in, out := &in.PlanValidation, &out.PlanValidation
		*out = new(bool)
		**out = **in
	}
	if in.PointInTimeRecoveryDeploymentID != nil {
		in, out := &in.PointInTimeRecoveryDeploymentID, &out.PointInTimeRecoveryDeploymentID
		*out = new(string)
		**out = **in
	}
	if in.PointInTimeRecoveryTime != nil {
		in, out := &in.PointInTimeRecoveryTime, &out.PointInTimeRecoveryTime
		*out = new(string)
		**out = **in
	}
	if in.RemoteLeaderID != nil {
		in, out := &in.RemoteLeaderID, &out.RemoteLeaderID
		*out = new(string)
		**out = **in
	}
	if in.ResourceControllerURL != nil {
		in, out := &in.ResourceControllerURL, &out.ResourceControllerURL
		*out = new(string)
		**out = **in
	}
	if in.ResourceCrn != nil {
		in, out := &in.ResourceCrn, &out.ResourceCrn
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupName != nil {
		in, out := &in.ResourceGroupName, &out.ResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.ResourceName != nil {
		in, out := &in.ResourceName, &out.ResourceName
		*out = new(string)
		**out = **in
	}
	if in.ResourceStatus != nil {
		in, out := &in.ResourceStatus, &out.ResourceStatus
		*out = new(string)
		**out = **in
	}
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
	if in.ServiceEndpoints != nil {
		in, out := &in.ServiceEndpoints, &out.ServiceEndpoints
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		*out = make([]DatabaseSpecUsers, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.Whitelist != nil {
		in, out := &in.Whitelist, &out.Whitelist
		*out = make([]DatabaseSpecWhitelist, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpecResource.
func (in *DatabaseSpecResource) DeepCopy() *DatabaseSpecResource {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpecUsers) DeepCopyInto(out *DatabaseSpecUsers) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpecUsers.
func (in *DatabaseSpecUsers) DeepCopy() *DatabaseSpecUsers {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpecUsers)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpecWhitelist) DeepCopyInto(out *DatabaseSpecWhitelist) {
	*out = *in
	if in.Address != nil {
		in, out := &in.Address, &out.Address
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpecWhitelist.
func (in *DatabaseSpecWhitelist) DeepCopy() *DatabaseSpecWhitelist {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpecWhitelist)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseStatus) DeepCopyInto(out *DatabaseStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]apiv1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseStatus.
func (in *DatabaseStatus) DeepCopy() *DatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseStatus)
	in.DeepCopyInto(out)
	return out
}
