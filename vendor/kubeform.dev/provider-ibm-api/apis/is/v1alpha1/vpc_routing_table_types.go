/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type VpcRoutingTable struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpcRoutingTableSpec   `json:"spec,omitempty"`
	Status            VpcRoutingTableStatus `json:"status,omitempty"`
}

type VpcRoutingTableSpecSubnets struct {
	// Subnet ID
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// Subnet name
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type VpcRoutingTableSpec struct {
	State *VpcRoutingTableSpecResource `json:"state,omitempty" tf:"-"`

	Resource VpcRoutingTableSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type VpcRoutingTableSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Routing table Created At
	// +optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`
	// Routing table Href
	// +optional
	Href *string `json:"href,omitempty" tf:"href"`
	// Indicates whether this is the default routing table for this VPC
	// +optional
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default"`
	// Routing table Lifecycle State
	// +optional
	LifecycleState *string `json:"lifecycleState,omitempty" tf:"lifecycle_state"`
	// The user-defined name for this routing table.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Routing table Resource Type
	// +optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type"`
	// If set to true, this routing table will be used to route traffic that originates from Direct Link to this VPC.
	// +optional
	RouteDirectLinkIngress *bool `json:"routeDirectLinkIngress,omitempty" tf:"route_direct_link_ingress"`
	// If set to true, this routing table will be used to route traffic that originates from Transit Gateway to this VPC.
	// +optional
	RouteTransitGatewayIngress *bool `json:"routeTransitGatewayIngress,omitempty" tf:"route_transit_gateway_ingress"`
	// If set to true, this routing table will be used to route traffic that originates from subnets in other zones in this VPC.
	// +optional
	RouteVpcZoneIngress *bool `json:"routeVpcZoneIngress,omitempty" tf:"route_vpc_zone_ingress"`
	// The routing table identifier.
	// +optional
	RoutingTable *string `json:"routingTable,omitempty" tf:"routing_table"`
	// +optional
	Subnets []VpcRoutingTableSpecSubnets `json:"subnets,omitempty" tf:"subnets"`
	// The VPC identifier.
	Vpc *string `json:"vpc" tf:"vpc"`
}

type VpcRoutingTableStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VpcRoutingTableList is a list of VpcRoutingTables
type VpcRoutingTableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of VpcRoutingTable CRD objects
	Items []VpcRoutingTable `json:"items,omitempty"`
}
