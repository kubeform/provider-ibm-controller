/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Vpc struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpcSpec   `json:"spec,omitempty"`
	Status            VpcStatus `json:"status,omitempty"`
}

type VpcSpecCseSourceAddresses struct {
	// Cloud service endpoint IP Address
	// +optional
	Address *string `json:"address,omitempty" tf:"address"`
	// Location info of CSE Address
	// +optional
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name"`
}

type VpcSpecSecurityGroupRules struct {
	// +optional
	Code *int64 `json:"code,omitempty" tf:"code"`
	// Direction of traffic to enforce, either inbound or outbound
	// +optional
	Direction *string `json:"direction,omitempty" tf:"direction"`
	// IP version: ipv4
	// +optional
	IpVersion *string `json:"ipVersion,omitempty" tf:"ip_version"`
	// +optional
	PortMax *int64 `json:"portMax,omitempty" tf:"port_max"`
	// +optional
	PortMin *int64 `json:"portMin,omitempty" tf:"port_min"`
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// Security group id: an IP address, a CIDR block, or a single security group identifier
	// +optional
	Remote *string `json:"remote,omitempty" tf:"remote"`
	// Rule ID
	// +optional
	RuleID *string `json:"ruleID,omitempty" tf:"rule_id"`
	// +optional
	Type *int64 `json:"type,omitempty" tf:"type"`
}

type VpcSpecSecurityGroup struct {
	// Security group id
	// +optional
	GroupID *string `json:"groupID,omitempty" tf:"group_id"`
	// Security group name
	// +optional
	GroupName *string `json:"groupName,omitempty" tf:"group_name"`
	// Security Rules
	// +optional
	Rules []VpcSpecSecurityGroupRules `json:"rules,omitempty" tf:"rules"`
}

type VpcSpecSubnets struct {
	// Available IPv4 address count in the subnet
	// +optional
	AvailableIpv4AddressCount *int64 `json:"availableIpv4AddressCount,omitempty" tf:"available_ipv4_address_count"`
	// subnet ID
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// subent name
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// subnet status
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// Total IPv4 address count in the subnet
	// +optional
	TotalIpv4AddressCount *int64 `json:"totalIpv4AddressCount,omitempty" tf:"total_ipv4_address_count"`
	// subnet location
	// +optional
	Zone *string `json:"zone,omitempty" tf:"zone"`
}

type VpcSpec struct {
	State *VpcSpecResource `json:"state,omitempty" tf:"-"`

	Resource VpcSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type VpcSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Address Prefix management value
	// +optional
	AddressPrefixManagement *string `json:"addressPrefixManagement,omitempty" tf:"address_prefix_management"`
	// Set to true if classic access needs to enabled to VPC
	// +optional
	ClassicAccess *bool `json:"classicAccess,omitempty" tf:"classic_access"`
	// The crn of the resource
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// +optional
	CseSourceAddresses []VpcSpecCseSourceAddresses `json:"cseSourceAddresses,omitempty" tf:"cse_source_addresses"`
	// Default network ACL
	// +optional
	// Deprecated
	DefaultNetworkACL *string `json:"defaultNetworkACL,omitempty" tf:"default_network_acl"`
	// Default Network ACL name
	// +optional
	DefaultNetworkACLName *string `json:"defaultNetworkACLName,omitempty" tf:"default_network_acl_name"`
	// Default routing table associated with VPC
	// +optional
	DefaultRoutingTable *string `json:"defaultRoutingTable,omitempty" tf:"default_routing_table"`
	// Default routing table name
	// +optional
	DefaultRoutingTableName *string `json:"defaultRoutingTableName,omitempty" tf:"default_routing_table_name"`
	// Security group associated with VPC
	// +optional
	DefaultSecurityGroup *string `json:"defaultSecurityGroup,omitempty" tf:"default_security_group"`
	// Default security group name
	// +optional
	DefaultSecurityGroupName *string `json:"defaultSecurityGroupName,omitempty" tf:"default_security_group_name"`
	// VPC name
	Name *string `json:"name" tf:"name"`
	// The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
	// +optional
	ResourceControllerURL *string `json:"resourceControllerURL,omitempty" tf:"resource_controller_url"`
	// The crn of the resource
	// +optional
	ResourceCrn *string `json:"resourceCrn,omitempty" tf:"resource_crn"`
	// Resource group info
	// +optional
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group"`
	// The resource group name in which resource is provisioned
	// +optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name"`
	// The name of the resource
	// +optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name"`
	// The status of the resource
	// +optional
	ResourceStatus *string `json:"resourceStatus,omitempty" tf:"resource_status"`
	// +optional
	SecurityGroup []VpcSpecSecurityGroup `json:"securityGroup,omitempty" tf:"security_group"`
	// VPC status
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Subnets []VpcSpecSubnets `json:"subnets,omitempty" tf:"subnets"`
	// List of tags
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
}

type VpcStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VpcList is a list of Vpcs
type VpcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Vpc CRD objects
	Items []Vpc `json:"items,omitempty"`
}
