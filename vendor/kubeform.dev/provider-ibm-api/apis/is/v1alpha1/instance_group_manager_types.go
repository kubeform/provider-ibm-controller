/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type InstanceGroupManager struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceGroupManagerSpec   `json:"spec,omitempty"`
	Status            InstanceGroupManagerStatus `json:"status,omitempty"`
}

type InstanceGroupManagerSpecActions struct {
	// +optional
	InstanceGroupManagerAction *string `json:"instanceGroupManagerAction,omitempty" tf:"instance_group_manager_action"`
	// +optional
	InstanceGroupManagerActionName *string `json:"instanceGroupManagerActionName,omitempty" tf:"instance_group_manager_action_name"`
	// +optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type"`
}

type InstanceGroupManagerSpec struct {
	State *InstanceGroupManagerSpecResource `json:"state,omitempty" tf:"-"`

	Resource InstanceGroupManagerSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type InstanceGroupManagerSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Actions []InstanceGroupManagerSpecActions `json:"actions,omitempty" tf:"actions"`
	// The time window in seconds to aggregate metrics prior to evaluation
	// +optional
	AggregationWindow *int64 `json:"aggregationWindow,omitempty" tf:"aggregation_window"`
	// The duration of time in seconds to pause further scale actions after scaling has taken place
	// +optional
	Cooldown *int64 `json:"cooldown,omitempty" tf:"cooldown"`
	// enable instance group manager
	// +optional
	EnableManager *bool `json:"enableManager,omitempty" tf:"enable_manager"`
	// instance group ID
	InstanceGroup *string `json:"instanceGroup" tf:"instance_group"`
	// instance group manager ID
	// +optional
	ManagerID *string `json:"managerID,omitempty" tf:"manager_id"`
	// The type of instance group manager.
	// +optional
	ManagerType *string `json:"managerType,omitempty" tf:"manager_type"`
	// The maximum number of members in a managed instance group
	// +optional
	MaxMembershipCount *int64 `json:"maxMembershipCount,omitempty" tf:"max_membership_count"`
	// The minimum number of members in a managed instance group
	// +optional
	MinMembershipCount *int64 `json:"minMembershipCount,omitempty" tf:"min_membership_count"`
	// instance group manager name
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// list of Policies associated with instancegroup manager
	// +optional
	Policies []string `json:"policies,omitempty" tf:"policies"`
}

type InstanceGroupManagerStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// InstanceGroupManagerList is a list of InstanceGroupManagers
type InstanceGroupManagerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of InstanceGroupManager CRD objects
	Items []InstanceGroupManager `json:"items,omitempty"`
}
