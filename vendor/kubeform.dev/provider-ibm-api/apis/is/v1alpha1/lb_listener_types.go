/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type LbListener struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LbListenerSpec   `json:"spec,omitempty"`
	Status            LbListenerStatus `json:"status,omitempty"`
}

type LbListenerSpec struct {
	State *LbListenerSpecResource `json:"state,omitempty" tf:"-"`

	Resource LbListenerSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type LbListenerSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Listener will forward proxy protocol
	// +optional
	AcceptProxyProtocol *bool `json:"acceptProxyProtocol,omitempty" tf:"accept_proxy_protocol"`
	// certificate instance for the Loadbalancer
	// +optional
	CertificateInstance *string `json:"certificateInstance,omitempty" tf:"certificate_instance"`
	// Connection limit for Loadbalancer
	// +optional
	ConnectionLimit *int64 `json:"connectionLimit,omitempty" tf:"connection_limit"`
	// Loadbalancer default pool info
	// +optional
	DefaultPool *string `json:"defaultPool,omitempty" tf:"default_pool"`
	// Loadbalancer listener ID
	Lb *string `json:"lb" tf:"lb"`
	// +optional
	ListenerID *string `json:"listenerID,omitempty" tf:"listener_id"`
	// Loadbalancer listener port
	Port *int64 `json:"port" tf:"port"`
	// Loadbalancer protocol
	Protocol *string `json:"protocol" tf:"protocol"`
	// The crn of the LB resource
	// +optional
	RelatedCrn *string `json:"relatedCrn,omitempty" tf:"related_crn"`
	// Loadbalancer listener status
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type LbListenerStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// LbListenerList is a list of LbListeners
type LbListenerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of LbListener CRD objects
	Items []LbListener `json:"items,omitempty"`
}
