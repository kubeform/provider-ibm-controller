/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Snapshot struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnapshotSpec   `json:"spec,omitempty"`
	Status            SnapshotStatus `json:"status,omitempty"`
}

type SnapshotSpec struct {
	State *SnapshotSpecResource `json:"state,omitempty" tf:"-"`

	Resource SnapshotSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type SnapshotSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates if a boot volume attachment can be created with a volume created from this snapshot
	// +optional
	Bootable *bool `json:"bootable,omitempty" tf:"bootable"`
	// The crn of the resource
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// Encryption type of the snapshot
	// +optional
	Encryption *string `json:"encryption,omitempty" tf:"encryption"`
	// A reference to the root key used to wrap the data encryption key for the source volume.
	// +optional
	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key"`
	// URL for the snapshot
	// +optional
	Href *string `json:"href,omitempty" tf:"href"`
	// Snapshot lifecycle state
	// +optional
	LifecycleState *string `json:"lifecycleState,omitempty" tf:"lifecycle_state"`
	// Minimum capacity of the snapshot
	// +optional
	MinimumCapacity *int64 `json:"minimumCapacity,omitempty" tf:"minimum_capacity"`
	// Snapshot name
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The globally unique name for the operating system included in this image
	// +optional
	OperatingSystem *string `json:"operatingSystem,omitempty" tf:"operating_system"`
	// Resource group info
	// +optional
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group"`
	// The resource type of the snapshot
	// +optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type"`
	// The size of the snapshot
	// +optional
	Size *int64 `json:"size,omitempty" tf:"size"`
	// If present, the image id from which the data on this volume was most directly provisioned.
	// +optional
	SourceImage *string `json:"sourceImage,omitempty" tf:"source_image"`
	// Snapshot source volume
	SourceVolume *string `json:"sourceVolume" tf:"source_volume"`
}

type SnapshotStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SnapshotList is a list of Snapshots
type SnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Snapshot CRD objects
	Items []Snapshot `json:"items,omitempty"`
}
