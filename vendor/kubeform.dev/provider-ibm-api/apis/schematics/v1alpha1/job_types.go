/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Job struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              JobSpec   `json:"spec,omitempty"`
	Status            JobStatus `json:"status,omitempty"`
}

type JobSpecBastionSysLock struct {
	// Is the Workspace locked by the Schematic action ?.
	// +optional
	SysLocked *bool `json:"sysLocked,omitempty" tf:"sys_locked"`
	// When the user performed the action that lead to lock the Workspace ?.
	// +optional
	SysLockedAt *string `json:"sysLockedAt,omitempty" tf:"sys_locked_at"`
	// Name of the user who performed the action, that lead to lock the Workspace.
	// +optional
	SysLockedBy *string `json:"sysLockedBy,omitempty" tf:"sys_locked_by"`
}

type JobSpecBastion struct {
	// Targets creation time.
	// +optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`
	// E-mail address of the user who created the targets.
	// +optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by"`
	// Override credential for each resource.  Reference to credentials values, used by all the resources.
	// +optional
	CredentialRef *string `json:"credentialRef,omitempty" tf:"credential_ref"`
	// Target description.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Target ID.
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// Target name.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Array of the resource IDs.
	// +optional
	ResourceIDS []string `json:"resourceIDS,omitempty" tf:"resource_ids"`
	// Resource selection query string.
	// +optional
	ResourceQuery *string `json:"resourceQuery,omitempty" tf:"resource_query"`
	// System lock status.
	// +optional
	SysLock []JobSpecBastionSysLock `json:"sysLock,omitempty" tf:"sys_lock"`
	// Target type (`cluster`, `vsi`, `icd`, `vpc`).
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// Targets updation time.
	// +optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at"`
	// E-mail address of user who updated the targets.
	// +optional
	UpdatedBy *string `json:"updatedBy,omitempty" tf:"updated_by"`
}

type JobSpecDataActionJobDataInputsMetadata struct {
	// List of aliases for the variable name.
	// +optional
	Aliases []string `json:"aliases,omitempty" tf:"aliases"`
	// Default value for the variable, if the override value is not specified.
	// +optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`
	// Description of the meta data.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Display name of the group this variable belongs to.
	// +optional
	GroupBy *string `json:"groupBy,omitempty" tf:"group_by"`
	// If true, the variable will not be displayed on UI or CLI.
	// +optional
	Hidden *bool `json:"hidden,omitempty" tf:"hidden"`
	// Is the variable readonly ?.
	// +optional
	Immutable *bool `json:"immutable,omitempty" tf:"immutable"`
	// Regex for the variable value.
	// +optional
	Matches *string `json:"matches,omitempty" tf:"matches"`
	// Maximum length of the variable value. Applicable for string type.
	// +optional
	MaxLength *int64 `json:"maxLength,omitempty" tf:"max_length"`
	// Maximum value of the variable. Applicable for integer type.
	// +optional
	MaxValue *int64 `json:"maxValue,omitempty" tf:"max_value"`
	// Minimum length of the variable value. Applicable for string type.
	// +optional
	MinLength *int64 `json:"minLength,omitempty" tf:"min_length"`
	// Minimum value of the variable. Applicable for integer type.
	// +optional
	MinValue *int64 `json:"minValue,omitempty" tf:"min_value"`
	// List of possible values for this variable.  If type is integer or date, then the array of string will be  converted to array of integers or date during runtime.
	// +optional
	Options []string `json:"options,omitempty" tf:"options"`
	// Relative position of this variable in a list.
	// +optional
	Position *int64 `json:"position,omitempty" tf:"position"`
	// Is the variable secure or sensitive ?.
	// +optional
	Secure *bool `json:"secure,omitempty" tf:"secure"`
	// Source of this meta-data.
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// Type of the variable.
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type JobSpecDataActionJobDataInputs struct {
	// Reference link to the variable value By default the expression will point to self.value.
	// +optional
	Link *string `json:"link,omitempty" tf:"link"`
	// User editable metadata for the variables.
	// +optional
	Metadata []JobSpecDataActionJobDataInputsMetadata `json:"metadata,omitempty" tf:"metadata"`
	// Name of the variable.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Value for the variable or reference to the value.
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type JobSpecDataActionJobDataOutputsMetadata struct {
	// List of aliases for the variable name.
	// +optional
	Aliases []string `json:"aliases,omitempty" tf:"aliases"`
	// Default value for the variable, if the override value is not specified.
	// +optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`
	// Description of the meta data.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Display name of the group this variable belongs to.
	// +optional
	GroupBy *string `json:"groupBy,omitempty" tf:"group_by"`
	// If true, the variable will not be displayed on UI or CLI.
	// +optional
	Hidden *bool `json:"hidden,omitempty" tf:"hidden"`
	// Is the variable readonly ?.
	// +optional
	Immutable *bool `json:"immutable,omitempty" tf:"immutable"`
	// Regex for the variable value.
	// +optional
	Matches *string `json:"matches,omitempty" tf:"matches"`
	// Maximum length of the variable value. Applicable for string type.
	// +optional
	MaxLength *int64 `json:"maxLength,omitempty" tf:"max_length"`
	// Maximum value of the variable. Applicable for integer type.
	// +optional
	MaxValue *int64 `json:"maxValue,omitempty" tf:"max_value"`
	// Minimum length of the variable value. Applicable for string type.
	// +optional
	MinLength *int64 `json:"minLength,omitempty" tf:"min_length"`
	// Minimum value of the variable. Applicable for integer type.
	// +optional
	MinValue *int64 `json:"minValue,omitempty" tf:"min_value"`
	// List of possible values for this variable.  If type is integer or date, then the array of string will be  converted to array of integers or date during runtime.
	// +optional
	Options []string `json:"options,omitempty" tf:"options"`
	// Relative position of this variable in a list.
	// +optional
	Position *int64 `json:"position,omitempty" tf:"position"`
	// Is the variable secure or sensitive ?.
	// +optional
	Secure *bool `json:"secure,omitempty" tf:"secure"`
	// Source of this meta-data.
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// Type of the variable.
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type JobSpecDataActionJobDataOutputs struct {
	// Reference link to the variable value By default the expression will point to self.value.
	// +optional
	Link *string `json:"link,omitempty" tf:"link"`
	// User editable metadata for the variables.
	// +optional
	Metadata []JobSpecDataActionJobDataOutputsMetadata `json:"metadata,omitempty" tf:"metadata"`
	// Name of the variable.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Value for the variable or reference to the value.
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type JobSpecDataActionJobDataSettingsMetadata struct {
	// List of aliases for the variable name.
	// +optional
	Aliases []string `json:"aliases,omitempty" tf:"aliases"`
	// Default value for the variable, if the override value is not specified.
	// +optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`
	// Description of the meta data.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Display name of the group this variable belongs to.
	// +optional
	GroupBy *string `json:"groupBy,omitempty" tf:"group_by"`
	// If true, the variable will not be displayed on UI or CLI.
	// +optional
	Hidden *bool `json:"hidden,omitempty" tf:"hidden"`
	// Is the variable readonly ?.
	// +optional
	Immutable *bool `json:"immutable,omitempty" tf:"immutable"`
	// Regex for the variable value.
	// +optional
	Matches *string `json:"matches,omitempty" tf:"matches"`
	// Maximum length of the variable value. Applicable for string type.
	// +optional
	MaxLength *int64 `json:"maxLength,omitempty" tf:"max_length"`
	// Maximum value of the variable. Applicable for integer type.
	// +optional
	MaxValue *int64 `json:"maxValue,omitempty" tf:"max_value"`
	// Minimum length of the variable value. Applicable for string type.
	// +optional
	MinLength *int64 `json:"minLength,omitempty" tf:"min_length"`
	// Minimum value of the variable. Applicable for integer type.
	// +optional
	MinValue *int64 `json:"minValue,omitempty" tf:"min_value"`
	// List of possible values for this variable.  If type is integer or date, then the array of string will be  converted to array of integers or date during runtime.
	// +optional
	Options []string `json:"options,omitempty" tf:"options"`
	// Relative position of this variable in a list.
	// +optional
	Position *int64 `json:"position,omitempty" tf:"position"`
	// Is the variable secure or sensitive ?.
	// +optional
	Secure *bool `json:"secure,omitempty" tf:"secure"`
	// Source of this meta-data.
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// Type of the variable.
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type JobSpecDataActionJobDataSettings struct {
	// Reference link to the variable value By default the expression will point to self.value.
	// +optional
	Link *string `json:"link,omitempty" tf:"link"`
	// User editable metadata for the variables.
	// +optional
	Metadata []JobSpecDataActionJobDataSettingsMetadata `json:"metadata,omitempty" tf:"metadata"`
	// Name of the variable.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Value for the variable or reference to the value.
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type JobSpecDataActionJobData struct {
	// Flow name.
	// +optional
	ActionName *string `json:"actionName,omitempty" tf:"action_name"`
	// Input variables data used by an action job.
	// +optional
	Inputs []JobSpecDataActionJobDataInputs `json:"inputs,omitempty" tf:"inputs"`
	// Output variables data from an action job.
	// +optional
	Outputs []JobSpecDataActionJobDataOutputs `json:"outputs,omitempty" tf:"outputs"`
	// Environment variables used by all the templates in an action.
	// +optional
	Settings []JobSpecDataActionJobDataSettings `json:"settings,omitempty" tf:"settings"`
	// Job status updation timestamp.
	// +optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at"`
}

type JobSpecData struct {
	// Action Job data.
	// +optional
	ActionJobData []JobSpecDataActionJobData `json:"actionJobData,omitempty" tf:"action_job_data"`
	// Type of the job.
	JobType *string `json:"jobType" tf:"job_type"`
}

type JobSpecJobEnvSettingsMetadata struct {
	// List of aliases for the variable name.
	// +optional
	Aliases []string `json:"aliases,omitempty" tf:"aliases"`
	// Default value for the variable, if the override value is not specified.
	// +optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`
	// Description of the meta data.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Display name of the group this variable belongs to.
	// +optional
	GroupBy *string `json:"groupBy,omitempty" tf:"group_by"`
	// If true, the variable will not be displayed on UI or CLI.
	// +optional
	Hidden *bool `json:"hidden,omitempty" tf:"hidden"`
	// Is the variable readonly ?.
	// +optional
	Immutable *bool `json:"immutable,omitempty" tf:"immutable"`
	// Regex for the variable value.
	// +optional
	Matches *string `json:"matches,omitempty" tf:"matches"`
	// Maximum length of the variable value. Applicable for string type.
	// +optional
	MaxLength *int64 `json:"maxLength,omitempty" tf:"max_length"`
	// Maximum value of the variable. Applicable for integer type.
	// +optional
	MaxValue *int64 `json:"maxValue,omitempty" tf:"max_value"`
	// Minimum length of the variable value. Applicable for string type.
	// +optional
	MinLength *int64 `json:"minLength,omitempty" tf:"min_length"`
	// Minimum value of the variable. Applicable for integer type.
	// +optional
	MinValue *int64 `json:"minValue,omitempty" tf:"min_value"`
	// List of possible values for this variable.  If type is integer or date, then the array of string will be  converted to array of integers or date during runtime.
	// +optional
	Options []string `json:"options,omitempty" tf:"options"`
	// Relative position of this variable in a list.
	// +optional
	Position *int64 `json:"position,omitempty" tf:"position"`
	// Is the variable secure or sensitive ?.
	// +optional
	Secure *bool `json:"secure,omitempty" tf:"secure"`
	// Source of this meta-data.
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// Type of the variable.
	Type *string `json:"type" tf:"type"`
}

type JobSpecJobEnvSettings struct {
	// Reference link to the variable value By default the expression will point to self.value.
	// +optional
	Link *string `json:"link,omitempty" tf:"link"`
	// User editable metadata for the variables.
	// +optional
	Metadata []JobSpecJobEnvSettingsMetadata `json:"metadata,omitempty" tf:"metadata"`
	// Name of the variable.
	Name *string `json:"name" tf:"name"`
	// Value for the variable or reference to the value.
	Value *string `json:"value" tf:"value"`
}

type JobSpecJobInputsMetadata struct {
	// List of aliases for the variable name.
	// +optional
	Aliases []string `json:"aliases,omitempty" tf:"aliases"`
	// Default value for the variable, if the override value is not specified.
	// +optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`
	// Description of the meta data.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Display name of the group this variable belongs to.
	// +optional
	GroupBy *string `json:"groupBy,omitempty" tf:"group_by"`
	// If true, the variable will not be displayed on UI or CLI.
	// +optional
	Hidden *bool `json:"hidden,omitempty" tf:"hidden"`
	// Is the variable readonly ?.
	// +optional
	Immutable *bool `json:"immutable,omitempty" tf:"immutable"`
	// Regex for the variable value.
	// +optional
	Matches *string `json:"matches,omitempty" tf:"matches"`
	// Maximum length of the variable value. Applicable for string type.
	// +optional
	MaxLength *int64 `json:"maxLength,omitempty" tf:"max_length"`
	// Maximum value of the variable. Applicable for integer type.
	// +optional
	MaxValue *int64 `json:"maxValue,omitempty" tf:"max_value"`
	// Minimum length of the variable value. Applicable for string type.
	// +optional
	MinLength *int64 `json:"minLength,omitempty" tf:"min_length"`
	// Minimum value of the variable. Applicable for integer type.
	// +optional
	MinValue *int64 `json:"minValue,omitempty" tf:"min_value"`
	// List of possible values for this variable.  If type is integer or date, then the array of string will be  converted to array of integers or date during runtime.
	// +optional
	Options []string `json:"options,omitempty" tf:"options"`
	// Relative position of this variable in a list.
	// +optional
	Position *int64 `json:"position,omitempty" tf:"position"`
	// Is the variable secure or sensitive ?.
	// +optional
	Secure *bool `json:"secure,omitempty" tf:"secure"`
	// Source of this meta-data.
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// Type of the variable.
	Type *string `json:"type" tf:"type"`
}

type JobSpecJobInputs struct {
	// Reference link to the variable value By default the expression will point to self.value.
	// +optional
	Link *string `json:"link,omitempty" tf:"link"`
	// User editable metadata for the variables.
	// +optional
	Metadata []JobSpecJobInputsMetadata `json:"metadata,omitempty" tf:"metadata"`
	// Name of the variable.
	Name *string `json:"name" tf:"name"`
	// Value for the variable or reference to the value.
	Value *string `json:"value" tf:"value"`
}

type JobSpecJobLogSummaryActionJobRecap struct {
	// Number of changed.
	// +optional
	Changed *float64 `json:"changed,omitempty" tf:"changed"`
	// Number of failed.
	// +optional
	Failed *float64 `json:"failed,omitempty" tf:"failed"`
	// Number of OK.
	// +optional
	Ok *float64 `json:"ok,omitempty" tf:"ok"`
	// Number of skipped.
	// +optional
	Skipped *float64 `json:"skipped,omitempty" tf:"skipped"`
	// List of target or host name.
	// +optional
	Target []string `json:"target,omitempty" tf:"target"`
	// Number of unreachable.
	// +optional
	Unreachable *float64 `json:"unreachable,omitempty" tf:"unreachable"`
}

type JobSpecJobLogSummaryActionJob struct {
	// number of plays in playbook.
	// +optional
	PlayCount *float64 `json:"playCount,omitempty" tf:"play_count"`
	// Recap records.
	// +optional
	Recap []JobSpecJobLogSummaryActionJobRecap `json:"recap,omitempty" tf:"recap"`
	// number of targets or hosts.
	// +optional
	TargetCount *float64 `json:"targetCount,omitempty" tf:"target_count"`
	// number of tasks in playbook.
	// +optional
	TaskCount *float64 `json:"taskCount,omitempty" tf:"task_count"`
}

type JobSpecJobLogSummaryLogErrors struct {
	// Error code in the Log.
	// +optional
	ErrorCode *string `json:"errorCode,omitempty" tf:"error_code"`
	// Number of occurrence.
	// +optional
	ErrorCount *float64 `json:"errorCount,omitempty" tf:"error_count"`
	// Summary error message in the log.
	// +optional
	ErrorMsg *string `json:"errorMsg,omitempty" tf:"error_msg"`
}

type JobSpecJobLogSummaryRepoDownloadJob struct {
	// Detected template or data file type.
	// +optional
	DetectedFiletype *string `json:"detectedFiletype,omitempty" tf:"detected_filetype"`
	// Number of inputs detected.
	// +optional
	InputsCount *string `json:"inputsCount,omitempty" tf:"inputs_count"`
	// Number of outputs detected.
	// +optional
	OutputsCount *string `json:"outputsCount,omitempty" tf:"outputs_count"`
	// Number of files quarantined.
	// +optional
	QuarantinedFileCount *float64 `json:"quarantinedFileCount,omitempty" tf:"quarantined_file_count"`
	// Number of files scanned.
	// +optional
	ScannedFileCount *float64 `json:"scannedFileCount,omitempty" tf:"scanned_file_count"`
}

type JobSpecJobLogSummary struct {
	// Flow Job log summary.
	// +optional
	ActionJob []JobSpecJobLogSummaryActionJob `json:"actionJob,omitempty" tf:"action_job"`
	// Job log elapsed time (`log_analyzed_till - log_start_at`).
	// +optional
	ElapsedTime *float64 `json:"elapsedTime,omitempty" tf:"elapsed_time"`
	// Workspace ID.
	// +optional
	JobID *string `json:"jobID,omitempty" tf:"job_id"`
	// Type of Job.
	// +optional
	JobType *string `json:"jobType,omitempty" tf:"job_type"`
	// Job log update timestamp.
	// +optional
	LogAnalyzedTill *string `json:"logAnalyzedTill,omitempty" tf:"log_analyzed_till"`
	// Job log errors.
	// +optional
	LogErrors []JobSpecJobLogSummaryLogErrors `json:"logErrors,omitempty" tf:"log_errors"`
	// Job log start timestamp.
	// +optional
	LogStartAt *string `json:"logStartAt,omitempty" tf:"log_start_at"`
	// Repo download Job log summary.
	// +optional
	RepoDownloadJob []JobSpecJobLogSummaryRepoDownloadJob `json:"repoDownloadJob,omitempty" tf:"repo_download_job"`
}

type JobSpecStatusActionJobStatus struct {
	// Action name.
	// +optional
	ActionName *string `json:"actionName,omitempty" tf:"action_name"`
	// Status of the resources.
	// +optional
	BastionStatusCode *string `json:"bastionStatusCode,omitempty" tf:"bastion_status_code"`
	// Bastion status message to be displayed along with the `bastion_status_code`.
	// +optional
	BastionStatusMessage *string `json:"bastionStatusMessage,omitempty" tf:"bastion_status_message"`
	// Status of the jobs.
	// +optional
	StatusCode *string `json:"statusCode,omitempty" tf:"status_code"`
	// Action job status message to be displayed along with the `action_status_code`.
	// +optional
	StatusMessage *string `json:"statusMessage,omitempty" tf:"status_message"`
	// Status of the resources.
	// +optional
	TargetsStatusCode *string `json:"targetsStatusCode,omitempty" tf:"targets_status_code"`
	// Aggregated status message for all target resources, to be displayed along with the `targets_status_code`.
	// +optional
	TargetsStatusMessage *string `json:"targetsStatusMessage,omitempty" tf:"targets_status_message"`
	// Job status updation timestamp.
	// +optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at"`
}

type JobSpecStatus struct {
	// Action Job Status.
	// +optional
	ActionJobStatus []JobSpecStatusActionJobStatus `json:"actionJobStatus,omitempty" tf:"action_job_status"`
}

type JobSpec struct {
	State *JobSpecResource `json:"state,omitempty" tf:"-"`

	Resource JobSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type JobSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Complete target details with the user inputs and the system generated data.
	// +optional
	Bastion []JobSpecBastion `json:"bastion,omitempty" tf:"bastion"`
	// Schematics job command name.
	CommandName *string `json:"commandName" tf:"command_name"`
	// Name of the Schematics automation resource.
	CommandObject *string `json:"commandObject" tf:"command_object"`
	// Job command object ID (`workspace-id, action-id or control-id`).
	CommandObjectID *string `json:"commandObjectID" tf:"command_object_id"`
	// Command line options for the command.
	// +optional
	CommandOptions []string `json:"commandOptions,omitempty" tf:"command_options"`
	// Schematics job command parameter (`playbook-name, capsule-name or flow-name`).
	CommandParameter *string `json:"commandParameter" tf:"command_parameter"`
	// Job data.
	// +optional
	Data []JobSpecData `json:"data,omitempty" tf:"data"`
	// Job description derived from the related action.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Duration of job execution, for example, `40 sec`.
	// +optional
	Duration *string `json:"duration,omitempty" tf:"duration"`
	// Job end time.
	// +optional
	EndAt *string `json:"endAt,omitempty" tf:"end_at"`
	// Environment variables used by the job while performing an action.
	// +optional
	JobEnvSettings []JobSpecJobEnvSettings `json:"jobEnvSettings,omitempty" tf:"job_env_settings"`
	// Job inputs used by an action.
	// +optional
	JobInputs []JobSpecJobInputs `json:"jobInputs,omitempty" tf:"job_inputs"`
	// Job log summary record.
	// +optional
	JobLogSummary []JobSpecJobLogSummary `json:"jobLogSummary,omitempty" tf:"job_log_summary"`
	// List of action locations supported by IBM Cloud Schematics service.  **Note** this does not limit the location of the resources provisioned using Schematics.
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// Job log store URL.
	// +optional
	LogStoreURL *string `json:"logStoreURL,omitempty" tf:"log_store_url"`
	// Job name, uniquely derived from the related action.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Resource group name derived from the related action.
	// +optional
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group"`
	// Job results store URL.
	// +optional
	ResultsURL *string `json:"resultsURL,omitempty" tf:"results_url"`
	// Job start time.
	// +optional
	StartAt *string `json:"startAt,omitempty" tf:"start_at"`
	// Job state store URL.
	// +optional
	StateStoreURL *string `json:"stateStoreURL,omitempty" tf:"state_store_url"`
	// Job Status.
	// +optional
	Status []JobSpecStatus `json:"status,omitempty" tf:"status"`
	// Job submission time.
	// +optional
	SubmittedAt *string `json:"submittedAt,omitempty" tf:"submitted_at"`
	// E-mail address of the user who submitted the job.
	// +optional
	SubmittedBy *string `json:"submittedBy,omitempty" tf:"submitted_by"`
	// User defined tags, while running the job.
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Inventory of host and host group for the playbook in `INI` file format. For example, `"targets_ini": "[webserverhost]  172.22.192.6  [dbhost]  172.22.192.5"`. For more information, about an inventory host group syntax, see [Inventory host groups](/docs/schematics?topic=schematics-schematics-cli-reference#schematics-inventory-host-grps).
	// +optional
	TargetsIni *string `json:"targetsIni,omitempty" tf:"targets_ini"`
	// Job status updation timestamp.
	// +optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at"`
}

type JobStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// JobList is a list of Jobs
type JobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Job CRD objects
	Items []Job `json:"items,omitempty"`
}
