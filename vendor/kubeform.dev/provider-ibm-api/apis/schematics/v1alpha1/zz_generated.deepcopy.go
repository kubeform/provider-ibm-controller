//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	apiv1 "kmodules.xyz/client-go/api/v1"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Action) DeepCopyInto(out *Action) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Action.
func (in *Action) DeepCopy() *Action {
	if in == nil {
		return nil
	}
	out := new(Action)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Action) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionList) DeepCopyInto(out *ActionList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Action, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionList.
func (in *ActionList) DeepCopy() *ActionList {
	if in == nil {
		return nil
	}
	out := new(ActionList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ActionList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpec) DeepCopyInto(out *ActionSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(ActionSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpec.
func (in *ActionSpec) DeepCopy() *ActionSpec {
	if in == nil {
		return nil
	}
	out := new(ActionSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecActionInputs) DeepCopyInto(out *ActionSpecActionInputs) {
	*out = *in
	if in.Link != nil {
		in, out := &in.Link, &out.Link
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]ActionSpecActionInputsMetadata, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecActionInputs.
func (in *ActionSpecActionInputs) DeepCopy() *ActionSpecActionInputs {
	if in == nil {
		return nil
	}
	out := new(ActionSpecActionInputs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecActionInputsMetadata) DeepCopyInto(out *ActionSpecActionInputsMetadata) {
	*out = *in
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DefaultValue != nil {
		in, out := &in.DefaultValue, &out.DefaultValue
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = new(string)
		**out = **in
	}
	if in.Hidden != nil {
		in, out := &in.Hidden, &out.Hidden
		*out = new(bool)
		**out = **in
	}
	if in.Immutable != nil {
		in, out := &in.Immutable, &out.Immutable
		*out = new(bool)
		**out = **in
	}
	if in.Matches != nil {
		in, out := &in.Matches, &out.Matches
		*out = new(string)
		**out = **in
	}
	if in.MaxLength != nil {
		in, out := &in.MaxLength, &out.MaxLength
		*out = new(int64)
		**out = **in
	}
	if in.MaxValue != nil {
		in, out := &in.MaxValue, &out.MaxValue
		*out = new(int64)
		**out = **in
	}
	if in.MinLength != nil {
		in, out := &in.MinLength, &out.MinLength
		*out = new(int64)
		**out = **in
	}
	if in.MinValue != nil {
		in, out := &in.MinValue, &out.MinValue
		*out = new(int64)
		**out = **in
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Position != nil {
		in, out := &in.Position, &out.Position
		*out = new(int64)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(bool)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecActionInputsMetadata.
func (in *ActionSpecActionInputsMetadata) DeepCopy() *ActionSpecActionInputsMetadata {
	if in == nil {
		return nil
	}
	out := new(ActionSpecActionInputsMetadata)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecActionOutputs) DeepCopyInto(out *ActionSpecActionOutputs) {
	*out = *in
	if in.Link != nil {
		in, out := &in.Link, &out.Link
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]ActionSpecActionOutputsMetadata, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecActionOutputs.
func (in *ActionSpecActionOutputs) DeepCopy() *ActionSpecActionOutputs {
	if in == nil {
		return nil
	}
	out := new(ActionSpecActionOutputs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecActionOutputsMetadata) DeepCopyInto(out *ActionSpecActionOutputsMetadata) {
	*out = *in
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DefaultValue != nil {
		in, out := &in.DefaultValue, &out.DefaultValue
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = new(string)
		**out = **in
	}
	if in.Hidden != nil {
		in, out := &in.Hidden, &out.Hidden
		*out = new(bool)
		**out = **in
	}
	if in.Immutable != nil {
		in, out := &in.Immutable, &out.Immutable
		*out = new(bool)
		**out = **in
	}
	if in.Matches != nil {
		in, out := &in.Matches, &out.Matches
		*out = new(string)
		**out = **in
	}
	if in.MaxLength != nil {
		in, out := &in.MaxLength, &out.MaxLength
		*out = new(int64)
		**out = **in
	}
	if in.MaxValue != nil {
		in, out := &in.MaxValue, &out.MaxValue
		*out = new(int64)
		**out = **in
	}
	if in.MinLength != nil {
		in, out := &in.MinLength, &out.MinLength
		*out = new(int64)
		**out = **in
	}
	if in.MinValue != nil {
		in, out := &in.MinValue, &out.MinValue
		*out = new(int64)
		**out = **in
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Position != nil {
		in, out := &in.Position, &out.Position
		*out = new(int64)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(bool)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecActionOutputsMetadata.
func (in *ActionSpecActionOutputsMetadata) DeepCopy() *ActionSpecActionOutputsMetadata {
	if in == nil {
		return nil
	}
	out := new(ActionSpecActionOutputsMetadata)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecBastion) DeepCopyInto(out *ActionSpecBastion) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.CreatedBy != nil {
		in, out := &in.CreatedBy, &out.CreatedBy
		*out = new(string)
		**out = **in
	}
	if in.CredentialRef != nil {
		in, out := &in.CredentialRef, &out.CredentialRef
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ResourceIDS != nil {
		in, out := &in.ResourceIDS, &out.ResourceIDS
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ResourceQuery != nil {
		in, out := &in.ResourceQuery, &out.ResourceQuery
		*out = new(string)
		**out = **in
	}
	if in.SysLock != nil {
		in, out := &in.SysLock, &out.SysLock
		*out = make([]ActionSpecBastionSysLock, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		*out = new(string)
		**out = **in
	}
	if in.UpdatedBy != nil {
		in, out := &in.UpdatedBy, &out.UpdatedBy
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecBastion.
func (in *ActionSpecBastion) DeepCopy() *ActionSpecBastion {
	if in == nil {
		return nil
	}
	out := new(ActionSpecBastion)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecBastionSysLock) DeepCopyInto(out *ActionSpecBastionSysLock) {
	*out = *in
	if in.SysLocked != nil {
		in, out := &in.SysLocked, &out.SysLocked
		*out = new(bool)
		**out = **in
	}
	if in.SysLockedAt != nil {
		in, out := &in.SysLockedAt, &out.SysLockedAt
		*out = new(string)
		**out = **in
	}
	if in.SysLockedBy != nil {
		in, out := &in.SysLockedBy, &out.SysLockedBy
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecBastionSysLock.
func (in *ActionSpecBastionSysLock) DeepCopy() *ActionSpecBastionSysLock {
	if in == nil {
		return nil
	}
	out := new(ActionSpecBastionSysLock)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecCredentials) DeepCopyInto(out *ActionSpecCredentials) {
	*out = *in
	if in.Link != nil {
		in, out := &in.Link, &out.Link
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]ActionSpecCredentialsMetadata, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecCredentials.
func (in *ActionSpecCredentials) DeepCopy() *ActionSpecCredentials {
	if in == nil {
		return nil
	}
	out := new(ActionSpecCredentials)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecCredentialsMetadata) DeepCopyInto(out *ActionSpecCredentialsMetadata) {
	*out = *in
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DefaultValue != nil {
		in, out := &in.DefaultValue, &out.DefaultValue
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = new(string)
		**out = **in
	}
	if in.Hidden != nil {
		in, out := &in.Hidden, &out.Hidden
		*out = new(bool)
		**out = **in
	}
	if in.Immutable != nil {
		in, out := &in.Immutable, &out.Immutable
		*out = new(bool)
		**out = **in
	}
	if in.Matches != nil {
		in, out := &in.Matches, &out.Matches
		*out = new(string)
		**out = **in
	}
	if in.MaxLength != nil {
		in, out := &in.MaxLength, &out.MaxLength
		*out = new(int64)
		**out = **in
	}
	if in.MaxValue != nil {
		in, out := &in.MaxValue, &out.MaxValue
		*out = new(int64)
		**out = **in
	}
	if in.MinLength != nil {
		in, out := &in.MinLength, &out.MinLength
		*out = new(int64)
		**out = **in
	}
	if in.MinValue != nil {
		in, out := &in.MinValue, &out.MinValue
		*out = new(int64)
		**out = **in
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Position != nil {
		in, out := &in.Position, &out.Position
		*out = new(int64)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(bool)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecCredentialsMetadata.
func (in *ActionSpecCredentialsMetadata) DeepCopy() *ActionSpecCredentialsMetadata {
	if in == nil {
		return nil
	}
	out := new(ActionSpecCredentialsMetadata)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecResource) DeepCopyInto(out *ActionSpecResource) {
	*out = *in
	if in.Account != nil {
		in, out := &in.Account, &out.Account
		*out = new(string)
		**out = **in
	}
	if in.ActionInputs != nil {
		in, out := &in.ActionInputs, &out.ActionInputs
		*out = make([]ActionSpecActionInputs, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ActionOutputs != nil {
		in, out := &in.ActionOutputs, &out.ActionOutputs
		*out = make([]ActionSpecActionOutputs, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Bastion != nil {
		in, out := &in.Bastion, &out.Bastion
		*out = make([]ActionSpecBastion, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CommandParameter != nil {
		in, out := &in.CommandParameter, &out.CommandParameter
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.CreatedBy != nil {
		in, out := &in.CreatedBy, &out.CreatedBy
		*out = new(string)
		**out = **in
	}
	if in.Credentials != nil {
		in, out := &in.Credentials, &out.Credentials
		*out = make([]ActionSpecCredentials, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Crn != nil {
		in, out := &in.Crn, &out.Crn
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.PlaybookNames != nil {
		in, out := &in.PlaybookNames, &out.PlaybookNames
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ResourceGroup != nil {
		in, out := &in.ResourceGroup, &out.ResourceGroup
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make([]ActionSpecSettings, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = make([]ActionSpecSource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SourceCreatedAt != nil {
		in, out := &in.SourceCreatedAt, &out.SourceCreatedAt
		*out = new(string)
		**out = **in
	}
	if in.SourceCreatedBy != nil {
		in, out := &in.SourceCreatedBy, &out.SourceCreatedBy
		*out = new(string)
		**out = **in
	}
	if in.SourceReadmeURL != nil {
		in, out := &in.SourceReadmeURL, &out.SourceReadmeURL
		*out = new(string)
		**out = **in
	}
	if in.SourceType != nil {
		in, out := &in.SourceType, &out.SourceType
		*out = new(string)
		**out = **in
	}
	if in.SourceUpdatedAt != nil {
		in, out := &in.SourceUpdatedAt, &out.SourceUpdatedAt
		*out = new(string)
		**out = **in
	}
	if in.SourceUpdatedBy != nil {
		in, out := &in.SourceUpdatedBy, &out.SourceUpdatedBy
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = make([]ActionSpecState, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SysLock != nil {
		in, out := &in.SysLock, &out.SysLock
		*out = make([]ActionSpecSysLock, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.TargetsIni != nil {
		in, out := &in.TargetsIni, &out.TargetsIni
		*out = new(string)
		**out = **in
	}
	if in.TriggerRecordID != nil {
		in, out := &in.TriggerRecordID, &out.TriggerRecordID
		*out = new(string)
		**out = **in
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		*out = new(string)
		**out = **in
	}
	if in.UpdatedBy != nil {
		in, out := &in.UpdatedBy, &out.UpdatedBy
		*out = new(string)
		**out = **in
	}
	if in.UserState != nil {
		in, out := &in.UserState, &out.UserState
		*out = make([]ActionSpecUserState, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.XGithubToken != nil {
		in, out := &in.XGithubToken, &out.XGithubToken
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecResource.
func (in *ActionSpecResource) DeepCopy() *ActionSpecResource {
	if in == nil {
		return nil
	}
	out := new(ActionSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecSettings) DeepCopyInto(out *ActionSpecSettings) {
	*out = *in
	if in.Link != nil {
		in, out := &in.Link, &out.Link
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]ActionSpecSettingsMetadata, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecSettings.
func (in *ActionSpecSettings) DeepCopy() *ActionSpecSettings {
	if in == nil {
		return nil
	}
	out := new(ActionSpecSettings)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecSettingsMetadata) DeepCopyInto(out *ActionSpecSettingsMetadata) {
	*out = *in
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DefaultValue != nil {
		in, out := &in.DefaultValue, &out.DefaultValue
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = new(string)
		**out = **in
	}
	if in.Hidden != nil {
		in, out := &in.Hidden, &out.Hidden
		*out = new(bool)
		**out = **in
	}
	if in.Immutable != nil {
		in, out := &in.Immutable, &out.Immutable
		*out = new(bool)
		**out = **in
	}
	if in.Matches != nil {
		in, out := &in.Matches, &out.Matches
		*out = new(string)
		**out = **in
	}
	if in.MaxLength != nil {
		in, out := &in.MaxLength, &out.MaxLength
		*out = new(int64)
		**out = **in
	}
	if in.MaxValue != nil {
		in, out := &in.MaxValue, &out.MaxValue
		*out = new(int64)
		**out = **in
	}
	if in.MinLength != nil {
		in, out := &in.MinLength, &out.MinLength
		*out = new(int64)
		**out = **in
	}
	if in.MinValue != nil {
		in, out := &in.MinValue, &out.MinValue
		*out = new(int64)
		**out = **in
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Position != nil {
		in, out := &in.Position, &out.Position
		*out = new(int64)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(bool)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecSettingsMetadata.
func (in *ActionSpecSettingsMetadata) DeepCopy() *ActionSpecSettingsMetadata {
	if in == nil {
		return nil
	}
	out := new(ActionSpecSettingsMetadata)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecSource) DeepCopyInto(out *ActionSpecSource) {
	*out = *in
	if in.Git != nil {
		in, out := &in.Git, &out.Git
		*out = make([]ActionSpecSourceGit, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SourceType != nil {
		in, out := &in.SourceType, &out.SourceType
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecSource.
func (in *ActionSpecSource) DeepCopy() *ActionSpecSource {
	if in == nil {
		return nil
	}
	out := new(ActionSpecSource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecSourceGit) DeepCopyInto(out *ActionSpecSourceGit) {
	*out = *in
	if in.GitBranch != nil {
		in, out := &in.GitBranch, &out.GitBranch
		*out = new(string)
		**out = **in
	}
	if in.GitRelease != nil {
		in, out := &in.GitRelease, &out.GitRelease
		*out = new(string)
		**out = **in
	}
	if in.GitRepoFolder != nil {
		in, out := &in.GitRepoFolder, &out.GitRepoFolder
		*out = new(string)
		**out = **in
	}
	if in.GitRepoURL != nil {
		in, out := &in.GitRepoURL, &out.GitRepoURL
		*out = new(string)
		**out = **in
	}
	if in.GitToken != nil {
		in, out := &in.GitToken, &out.GitToken
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecSourceGit.
func (in *ActionSpecSourceGit) DeepCopy() *ActionSpecSourceGit {
	if in == nil {
		return nil
	}
	out := new(ActionSpecSourceGit)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecState) DeepCopyInto(out *ActionSpecState) {
	*out = *in
	if in.StatusCode != nil {
		in, out := &in.StatusCode, &out.StatusCode
		*out = new(string)
		**out = **in
	}
	if in.StatusJobID != nil {
		in, out := &in.StatusJobID, &out.StatusJobID
		*out = new(string)
		**out = **in
	}
	if in.StatusMessage != nil {
		in, out := &in.StatusMessage, &out.StatusMessage
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecState.
func (in *ActionSpecState) DeepCopy() *ActionSpecState {
	if in == nil {
		return nil
	}
	out := new(ActionSpecState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecSysLock) DeepCopyInto(out *ActionSpecSysLock) {
	*out = *in
	if in.SysLocked != nil {
		in, out := &in.SysLocked, &out.SysLocked
		*out = new(bool)
		**out = **in
	}
	if in.SysLockedAt != nil {
		in, out := &in.SysLockedAt, &out.SysLockedAt
		*out = new(string)
		**out = **in
	}
	if in.SysLockedBy != nil {
		in, out := &in.SysLockedBy, &out.SysLockedBy
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecSysLock.
func (in *ActionSpecSysLock) DeepCopy() *ActionSpecSysLock {
	if in == nil {
		return nil
	}
	out := new(ActionSpecSysLock)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionSpecUserState) DeepCopyInto(out *ActionSpecUserState) {
	*out = *in
	if in.SetAt != nil {
		in, out := &in.SetAt, &out.SetAt
		*out = new(string)
		**out = **in
	}
	if in.SetBy != nil {
		in, out := &in.SetBy, &out.SetBy
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionSpecUserState.
func (in *ActionSpecUserState) DeepCopy() *ActionSpecUserState {
	if in == nil {
		return nil
	}
	out := new(ActionSpecUserState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActionStatus) DeepCopyInto(out *ActionStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]apiv1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActionStatus.
func (in *ActionStatus) DeepCopy() *ActionStatus {
	if in == nil {
		return nil
	}
	out := new(ActionStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Job) DeepCopyInto(out *Job) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Job.
func (in *Job) DeepCopy() *Job {
	if in == nil {
		return nil
	}
	out := new(Job)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Job) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobList) DeepCopyInto(out *JobList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Job, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobList.
func (in *JobList) DeepCopy() *JobList {
	if in == nil {
		return nil
	}
	out := new(JobList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *JobList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpec) DeepCopyInto(out *JobSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(JobSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpec.
func (in *JobSpec) DeepCopy() *JobSpec {
	if in == nil {
		return nil
	}
	out := new(JobSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecBastion) DeepCopyInto(out *JobSpecBastion) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.CreatedBy != nil {
		in, out := &in.CreatedBy, &out.CreatedBy
		*out = new(string)
		**out = **in
	}
	if in.CredentialRef != nil {
		in, out := &in.CredentialRef, &out.CredentialRef
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ResourceIDS != nil {
		in, out := &in.ResourceIDS, &out.ResourceIDS
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ResourceQuery != nil {
		in, out := &in.ResourceQuery, &out.ResourceQuery
		*out = new(string)
		**out = **in
	}
	if in.SysLock != nil {
		in, out := &in.SysLock, &out.SysLock
		*out = make([]JobSpecBastionSysLock, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		*out = new(string)
		**out = **in
	}
	if in.UpdatedBy != nil {
		in, out := &in.UpdatedBy, &out.UpdatedBy
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecBastion.
func (in *JobSpecBastion) DeepCopy() *JobSpecBastion {
	if in == nil {
		return nil
	}
	out := new(JobSpecBastion)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecBastionSysLock) DeepCopyInto(out *JobSpecBastionSysLock) {
	*out = *in
	if in.SysLocked != nil {
		in, out := &in.SysLocked, &out.SysLocked
		*out = new(bool)
		**out = **in
	}
	if in.SysLockedAt != nil {
		in, out := &in.SysLockedAt, &out.SysLockedAt
		*out = new(string)
		**out = **in
	}
	if in.SysLockedBy != nil {
		in, out := &in.SysLockedBy, &out.SysLockedBy
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecBastionSysLock.
func (in *JobSpecBastionSysLock) DeepCopy() *JobSpecBastionSysLock {
	if in == nil {
		return nil
	}
	out := new(JobSpecBastionSysLock)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecData) DeepCopyInto(out *JobSpecData) {
	*out = *in
	if in.ActionJobData != nil {
		in, out := &in.ActionJobData, &out.ActionJobData
		*out = make([]JobSpecDataActionJobData, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.JobType != nil {
		in, out := &in.JobType, &out.JobType
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecData.
func (in *JobSpecData) DeepCopy() *JobSpecData {
	if in == nil {
		return nil
	}
	out := new(JobSpecData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecDataActionJobData) DeepCopyInto(out *JobSpecDataActionJobData) {
	*out = *in
	if in.ActionName != nil {
		in, out := &in.ActionName, &out.ActionName
		*out = new(string)
		**out = **in
	}
	if in.Inputs != nil {
		in, out := &in.Inputs, &out.Inputs
		*out = make([]JobSpecDataActionJobDataInputs, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Outputs != nil {
		in, out := &in.Outputs, &out.Outputs
		*out = make([]JobSpecDataActionJobDataOutputs, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make([]JobSpecDataActionJobDataSettings, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecDataActionJobData.
func (in *JobSpecDataActionJobData) DeepCopy() *JobSpecDataActionJobData {
	if in == nil {
		return nil
	}
	out := new(JobSpecDataActionJobData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecDataActionJobDataInputs) DeepCopyInto(out *JobSpecDataActionJobDataInputs) {
	*out = *in
	if in.Link != nil {
		in, out := &in.Link, &out.Link
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]JobSpecDataActionJobDataInputsMetadata, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecDataActionJobDataInputs.
func (in *JobSpecDataActionJobDataInputs) DeepCopy() *JobSpecDataActionJobDataInputs {
	if in == nil {
		return nil
	}
	out := new(JobSpecDataActionJobDataInputs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecDataActionJobDataInputsMetadata) DeepCopyInto(out *JobSpecDataActionJobDataInputsMetadata) {
	*out = *in
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DefaultValue != nil {
		in, out := &in.DefaultValue, &out.DefaultValue
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = new(string)
		**out = **in
	}
	if in.Hidden != nil {
		in, out := &in.Hidden, &out.Hidden
		*out = new(bool)
		**out = **in
	}
	if in.Immutable != nil {
		in, out := &in.Immutable, &out.Immutable
		*out = new(bool)
		**out = **in
	}
	if in.Matches != nil {
		in, out := &in.Matches, &out.Matches
		*out = new(string)
		**out = **in
	}
	if in.MaxLength != nil {
		in, out := &in.MaxLength, &out.MaxLength
		*out = new(int64)
		**out = **in
	}
	if in.MaxValue != nil {
		in, out := &in.MaxValue, &out.MaxValue
		*out = new(int64)
		**out = **in
	}
	if in.MinLength != nil {
		in, out := &in.MinLength, &out.MinLength
		*out = new(int64)
		**out = **in
	}
	if in.MinValue != nil {
		in, out := &in.MinValue, &out.MinValue
		*out = new(int64)
		**out = **in
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Position != nil {
		in, out := &in.Position, &out.Position
		*out = new(int64)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(bool)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecDataActionJobDataInputsMetadata.
func (in *JobSpecDataActionJobDataInputsMetadata) DeepCopy() *JobSpecDataActionJobDataInputsMetadata {
	if in == nil {
		return nil
	}
	out := new(JobSpecDataActionJobDataInputsMetadata)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecDataActionJobDataOutputs) DeepCopyInto(out *JobSpecDataActionJobDataOutputs) {
	*out = *in
	if in.Link != nil {
		in, out := &in.Link, &out.Link
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]JobSpecDataActionJobDataOutputsMetadata, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecDataActionJobDataOutputs.
func (in *JobSpecDataActionJobDataOutputs) DeepCopy() *JobSpecDataActionJobDataOutputs {
	if in == nil {
		return nil
	}
	out := new(JobSpecDataActionJobDataOutputs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecDataActionJobDataOutputsMetadata) DeepCopyInto(out *JobSpecDataActionJobDataOutputsMetadata) {
	*out = *in
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DefaultValue != nil {
		in, out := &in.DefaultValue, &out.DefaultValue
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = new(string)
		**out = **in
	}
	if in.Hidden != nil {
		in, out := &in.Hidden, &out.Hidden
		*out = new(bool)
		**out = **in
	}
	if in.Immutable != nil {
		in, out := &in.Immutable, &out.Immutable
		*out = new(bool)
		**out = **in
	}
	if in.Matches != nil {
		in, out := &in.Matches, &out.Matches
		*out = new(string)
		**out = **in
	}
	if in.MaxLength != nil {
		in, out := &in.MaxLength, &out.MaxLength
		*out = new(int64)
		**out = **in
	}
	if in.MaxValue != nil {
		in, out := &in.MaxValue, &out.MaxValue
		*out = new(int64)
		**out = **in
	}
	if in.MinLength != nil {
		in, out := &in.MinLength, &out.MinLength
		*out = new(int64)
		**out = **in
	}
	if in.MinValue != nil {
		in, out := &in.MinValue, &out.MinValue
		*out = new(int64)
		**out = **in
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Position != nil {
		in, out := &in.Position, &out.Position
		*out = new(int64)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(bool)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecDataActionJobDataOutputsMetadata.
func (in *JobSpecDataActionJobDataOutputsMetadata) DeepCopy() *JobSpecDataActionJobDataOutputsMetadata {
	if in == nil {
		return nil
	}
	out := new(JobSpecDataActionJobDataOutputsMetadata)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecDataActionJobDataSettings) DeepCopyInto(out *JobSpecDataActionJobDataSettings) {
	*out = *in
	if in.Link != nil {
		in, out := &in.Link, &out.Link
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]JobSpecDataActionJobDataSettingsMetadata, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecDataActionJobDataSettings.
func (in *JobSpecDataActionJobDataSettings) DeepCopy() *JobSpecDataActionJobDataSettings {
	if in == nil {
		return nil
	}
	out := new(JobSpecDataActionJobDataSettings)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecDataActionJobDataSettingsMetadata) DeepCopyInto(out *JobSpecDataActionJobDataSettingsMetadata) {
	*out = *in
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DefaultValue != nil {
		in, out := &in.DefaultValue, &out.DefaultValue
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = new(string)
		**out = **in
	}
	if in.Hidden != nil {
		in, out := &in.Hidden, &out.Hidden
		*out = new(bool)
		**out = **in
	}
	if in.Immutable != nil {
		in, out := &in.Immutable, &out.Immutable
		*out = new(bool)
		**out = **in
	}
	if in.Matches != nil {
		in, out := &in.Matches, &out.Matches
		*out = new(string)
		**out = **in
	}
	if in.MaxLength != nil {
		in, out := &in.MaxLength, &out.MaxLength
		*out = new(int64)
		**out = **in
	}
	if in.MaxValue != nil {
		in, out := &in.MaxValue, &out.MaxValue
		*out = new(int64)
		**out = **in
	}
	if in.MinLength != nil {
		in, out := &in.MinLength, &out.MinLength
		*out = new(int64)
		**out = **in
	}
	if in.MinValue != nil {
		in, out := &in.MinValue, &out.MinValue
		*out = new(int64)
		**out = **in
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Position != nil {
		in, out := &in.Position, &out.Position
		*out = new(int64)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(bool)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecDataActionJobDataSettingsMetadata.
func (in *JobSpecDataActionJobDataSettingsMetadata) DeepCopy() *JobSpecDataActionJobDataSettingsMetadata {
	if in == nil {
		return nil
	}
	out := new(JobSpecDataActionJobDataSettingsMetadata)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecJobEnvSettings) DeepCopyInto(out *JobSpecJobEnvSettings) {
	*out = *in
	if in.Link != nil {
		in, out := &in.Link, &out.Link
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]JobSpecJobEnvSettingsMetadata, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecJobEnvSettings.
func (in *JobSpecJobEnvSettings) DeepCopy() *JobSpecJobEnvSettings {
	if in == nil {
		return nil
	}
	out := new(JobSpecJobEnvSettings)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecJobEnvSettingsMetadata) DeepCopyInto(out *JobSpecJobEnvSettingsMetadata) {
	*out = *in
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DefaultValue != nil {
		in, out := &in.DefaultValue, &out.DefaultValue
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = new(string)
		**out = **in
	}
	if in.Hidden != nil {
		in, out := &in.Hidden, &out.Hidden
		*out = new(bool)
		**out = **in
	}
	if in.Immutable != nil {
		in, out := &in.Immutable, &out.Immutable
		*out = new(bool)
		**out = **in
	}
	if in.Matches != nil {
		in, out := &in.Matches, &out.Matches
		*out = new(string)
		**out = **in
	}
	if in.MaxLength != nil {
		in, out := &in.MaxLength, &out.MaxLength
		*out = new(int64)
		**out = **in
	}
	if in.MaxValue != nil {
		in, out := &in.MaxValue, &out.MaxValue
		*out = new(int64)
		**out = **in
	}
	if in.MinLength != nil {
		in, out := &in.MinLength, &out.MinLength
		*out = new(int64)
		**out = **in
	}
	if in.MinValue != nil {
		in, out := &in.MinValue, &out.MinValue
		*out = new(int64)
		**out = **in
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Position != nil {
		in, out := &in.Position, &out.Position
		*out = new(int64)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(bool)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecJobEnvSettingsMetadata.
func (in *JobSpecJobEnvSettingsMetadata) DeepCopy() *JobSpecJobEnvSettingsMetadata {
	if in == nil {
		return nil
	}
	out := new(JobSpecJobEnvSettingsMetadata)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecJobInputs) DeepCopyInto(out *JobSpecJobInputs) {
	*out = *in
	if in.Link != nil {
		in, out := &in.Link, &out.Link
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]JobSpecJobInputsMetadata, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecJobInputs.
func (in *JobSpecJobInputs) DeepCopy() *JobSpecJobInputs {
	if in == nil {
		return nil
	}
	out := new(JobSpecJobInputs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecJobInputsMetadata) DeepCopyInto(out *JobSpecJobInputsMetadata) {
	*out = *in
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DefaultValue != nil {
		in, out := &in.DefaultValue, &out.DefaultValue
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.GroupBy != nil {
		in, out := &in.GroupBy, &out.GroupBy
		*out = new(string)
		**out = **in
	}
	if in.Hidden != nil {
		in, out := &in.Hidden, &out.Hidden
		*out = new(bool)
		**out = **in
	}
	if in.Immutable != nil {
		in, out := &in.Immutable, &out.Immutable
		*out = new(bool)
		**out = **in
	}
	if in.Matches != nil {
		in, out := &in.Matches, &out.Matches
		*out = new(string)
		**out = **in
	}
	if in.MaxLength != nil {
		in, out := &in.MaxLength, &out.MaxLength
		*out = new(int64)
		**out = **in
	}
	if in.MaxValue != nil {
		in, out := &in.MaxValue, &out.MaxValue
		*out = new(int64)
		**out = **in
	}
	if in.MinLength != nil {
		in, out := &in.MinLength, &out.MinLength
		*out = new(int64)
		**out = **in
	}
	if in.MinValue != nil {
		in, out := &in.MinValue, &out.MinValue
		*out = new(int64)
		**out = **in
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Position != nil {
		in, out := &in.Position, &out.Position
		*out = new(int64)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(bool)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecJobInputsMetadata.
func (in *JobSpecJobInputsMetadata) DeepCopy() *JobSpecJobInputsMetadata {
	if in == nil {
		return nil
	}
	out := new(JobSpecJobInputsMetadata)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecJobLogSummary) DeepCopyInto(out *JobSpecJobLogSummary) {
	*out = *in
	if in.ActionJob != nil {
		in, out := &in.ActionJob, &out.ActionJob
		*out = make([]JobSpecJobLogSummaryActionJob, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ElapsedTime != nil {
		in, out := &in.ElapsedTime, &out.ElapsedTime
		*out = new(float64)
		**out = **in
	}
	if in.JobID != nil {
		in, out := &in.JobID, &out.JobID
		*out = new(string)
		**out = **in
	}
	if in.JobType != nil {
		in, out := &in.JobType, &out.JobType
		*out = new(string)
		**out = **in
	}
	if in.LogAnalyzedTill != nil {
		in, out := &in.LogAnalyzedTill, &out.LogAnalyzedTill
		*out = new(string)
		**out = **in
	}
	if in.LogErrors != nil {
		in, out := &in.LogErrors, &out.LogErrors
		*out = make([]JobSpecJobLogSummaryLogErrors, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LogStartAt != nil {
		in, out := &in.LogStartAt, &out.LogStartAt
		*out = new(string)
		**out = **in
	}
	if in.RepoDownloadJob != nil {
		in, out := &in.RepoDownloadJob, &out.RepoDownloadJob
		*out = make([]JobSpecJobLogSummaryRepoDownloadJob, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecJobLogSummary.
func (in *JobSpecJobLogSummary) DeepCopy() *JobSpecJobLogSummary {
	if in == nil {
		return nil
	}
	out := new(JobSpecJobLogSummary)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecJobLogSummaryActionJob) DeepCopyInto(out *JobSpecJobLogSummaryActionJob) {
	*out = *in
	if in.PlayCount != nil {
		in, out := &in.PlayCount, &out.PlayCount
		*out = new(float64)
		**out = **in
	}
	if in.Recap != nil {
		in, out := &in.Recap, &out.Recap
		*out = make([]JobSpecJobLogSummaryActionJobRecap, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TargetCount != nil {
		in, out := &in.TargetCount, &out.TargetCount
		*out = new(float64)
		**out = **in
	}
	if in.TaskCount != nil {
		in, out := &in.TaskCount, &out.TaskCount
		*out = new(float64)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecJobLogSummaryActionJob.
func (in *JobSpecJobLogSummaryActionJob) DeepCopy() *JobSpecJobLogSummaryActionJob {
	if in == nil {
		return nil
	}
	out := new(JobSpecJobLogSummaryActionJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecJobLogSummaryActionJobRecap) DeepCopyInto(out *JobSpecJobLogSummaryActionJobRecap) {
	*out = *in
	if in.Changed != nil {
		in, out := &in.Changed, &out.Changed
		*out = new(float64)
		**out = **in
	}
	if in.Failed != nil {
		in, out := &in.Failed, &out.Failed
		*out = new(float64)
		**out = **in
	}
	if in.Ok != nil {
		in, out := &in.Ok, &out.Ok
		*out = new(float64)
		**out = **in
	}
	if in.Skipped != nil {
		in, out := &in.Skipped, &out.Skipped
		*out = new(float64)
		**out = **in
	}
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Unreachable != nil {
		in, out := &in.Unreachable, &out.Unreachable
		*out = new(float64)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecJobLogSummaryActionJobRecap.
func (in *JobSpecJobLogSummaryActionJobRecap) DeepCopy() *JobSpecJobLogSummaryActionJobRecap {
	if in == nil {
		return nil
	}
	out := new(JobSpecJobLogSummaryActionJobRecap)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecJobLogSummaryLogErrors) DeepCopyInto(out *JobSpecJobLogSummaryLogErrors) {
	*out = *in
	if in.ErrorCode != nil {
		in, out := &in.ErrorCode, &out.ErrorCode
		*out = new(string)
		**out = **in
	}
	if in.ErrorCount != nil {
		in, out := &in.ErrorCount, &out.ErrorCount
		*out = new(float64)
		**out = **in
	}
	if in.ErrorMsg != nil {
		in, out := &in.ErrorMsg, &out.ErrorMsg
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecJobLogSummaryLogErrors.
func (in *JobSpecJobLogSummaryLogErrors) DeepCopy() *JobSpecJobLogSummaryLogErrors {
	if in == nil {
		return nil
	}
	out := new(JobSpecJobLogSummaryLogErrors)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecJobLogSummaryRepoDownloadJob) DeepCopyInto(out *JobSpecJobLogSummaryRepoDownloadJob) {
	*out = *in
	if in.DetectedFiletype != nil {
		in, out := &in.DetectedFiletype, &out.DetectedFiletype
		*out = new(string)
		**out = **in
	}
	if in.InputsCount != nil {
		in, out := &in.InputsCount, &out.InputsCount
		*out = new(string)
		**out = **in
	}
	if in.OutputsCount != nil {
		in, out := &in.OutputsCount, &out.OutputsCount
		*out = new(string)
		**out = **in
	}
	if in.QuarantinedFileCount != nil {
		in, out := &in.QuarantinedFileCount, &out.QuarantinedFileCount
		*out = new(float64)
		**out = **in
	}
	if in.ScannedFileCount != nil {
		in, out := &in.ScannedFileCount, &out.ScannedFileCount
		*out = new(float64)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecJobLogSummaryRepoDownloadJob.
func (in *JobSpecJobLogSummaryRepoDownloadJob) DeepCopy() *JobSpecJobLogSummaryRepoDownloadJob {
	if in == nil {
		return nil
	}
	out := new(JobSpecJobLogSummaryRepoDownloadJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecResource) DeepCopyInto(out *JobSpecResource) {
	*out = *in
	if in.Bastion != nil {
		in, out := &in.Bastion, &out.Bastion
		*out = make([]JobSpecBastion, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CommandName != nil {
		in, out := &in.CommandName, &out.CommandName
		*out = new(string)
		**out = **in
	}
	if in.CommandObject != nil {
		in, out := &in.CommandObject, &out.CommandObject
		*out = new(string)
		**out = **in
	}
	if in.CommandObjectID != nil {
		in, out := &in.CommandObjectID, &out.CommandObjectID
		*out = new(string)
		**out = **in
	}
	if in.CommandOptions != nil {
		in, out := &in.CommandOptions, &out.CommandOptions
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.CommandParameter != nil {
		in, out := &in.CommandParameter, &out.CommandParameter
		*out = new(string)
		**out = **in
	}
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = make([]JobSpecData, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Duration != nil {
		in, out := &in.Duration, &out.Duration
		*out = new(string)
		**out = **in
	}
	if in.EndAt != nil {
		in, out := &in.EndAt, &out.EndAt
		*out = new(string)
		**out = **in
	}
	if in.JobEnvSettings != nil {
		in, out := &in.JobEnvSettings, &out.JobEnvSettings
		*out = make([]JobSpecJobEnvSettings, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.JobInputs != nil {
		in, out := &in.JobInputs, &out.JobInputs
		*out = make([]JobSpecJobInputs, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.JobLogSummary != nil {
		in, out := &in.JobLogSummary, &out.JobLogSummary
		*out = make([]JobSpecJobLogSummary, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.LogStoreURL != nil {
		in, out := &in.LogStoreURL, &out.LogStoreURL
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroup != nil {
		in, out := &in.ResourceGroup, &out.ResourceGroup
		*out = new(string)
		**out = **in
	}
	if in.ResultsURL != nil {
		in, out := &in.ResultsURL, &out.ResultsURL
		*out = new(string)
		**out = **in
	}
	if in.StartAt != nil {
		in, out := &in.StartAt, &out.StartAt
		*out = new(string)
		**out = **in
	}
	if in.StateStoreURL != nil {
		in, out := &in.StateStoreURL, &out.StateStoreURL
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = make([]JobSpecStatus, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubmittedAt != nil {
		in, out := &in.SubmittedAt, &out.SubmittedAt
		*out = new(string)
		**out = **in
	}
	if in.SubmittedBy != nil {
		in, out := &in.SubmittedBy, &out.SubmittedBy
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.TargetsIni != nil {
		in, out := &in.TargetsIni, &out.TargetsIni
		*out = new(string)
		**out = **in
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecResource.
func (in *JobSpecResource) DeepCopy() *JobSpecResource {
	if in == nil {
		return nil
	}
	out := new(JobSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecStatus) DeepCopyInto(out *JobSpecStatus) {
	*out = *in
	if in.ActionJobStatus != nil {
		in, out := &in.ActionJobStatus, &out.ActionJobStatus
		*out = make([]JobSpecStatusActionJobStatus, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecStatus.
func (in *JobSpecStatus) DeepCopy() *JobSpecStatus {
	if in == nil {
		return nil
	}
	out := new(JobSpecStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobSpecStatusActionJobStatus) DeepCopyInto(out *JobSpecStatusActionJobStatus) {
	*out = *in
	if in.ActionName != nil {
		in, out := &in.ActionName, &out.ActionName
		*out = new(string)
		**out = **in
	}
	if in.BastionStatusCode != nil {
		in, out := &in.BastionStatusCode, &out.BastionStatusCode
		*out = new(string)
		**out = **in
	}
	if in.BastionStatusMessage != nil {
		in, out := &in.BastionStatusMessage, &out.BastionStatusMessage
		*out = new(string)
		**out = **in
	}
	if in.StatusCode != nil {
		in, out := &in.StatusCode, &out.StatusCode
		*out = new(string)
		**out = **in
	}
	if in.StatusMessage != nil {
		in, out := &in.StatusMessage, &out.StatusMessage
		*out = new(string)
		**out = **in
	}
	if in.TargetsStatusCode != nil {
		in, out := &in.TargetsStatusCode, &out.TargetsStatusCode
		*out = new(string)
		**out = **in
	}
	if in.TargetsStatusMessage != nil {
		in, out := &in.TargetsStatusMessage, &out.TargetsStatusMessage
		*out = new(string)
		**out = **in
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobSpecStatusActionJobStatus.
func (in *JobSpecStatusActionJobStatus) DeepCopy() *JobSpecStatusActionJobStatus {
	if in == nil {
		return nil
	}
	out := new(JobSpecStatusActionJobStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobStatus) DeepCopyInto(out *JobStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]apiv1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobStatus.
func (in *JobStatus) DeepCopy() *JobStatus {
	if in == nil {
		return nil
	}
	out := new(JobStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Workspace) DeepCopyInto(out *Workspace) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Workspace.
func (in *Workspace) DeepCopy() *Workspace {
	if in == nil {
		return nil
	}
	out := new(Workspace)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Workspace) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceList) DeepCopyInto(out *WorkspaceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Workspace, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceList.
func (in *WorkspaceList) DeepCopy() *WorkspaceList {
	if in == nil {
		return nil
	}
	out := new(WorkspaceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *WorkspaceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceSpec) DeepCopyInto(out *WorkspaceSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(WorkspaceSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceSpec.
func (in *WorkspaceSpec) DeepCopy() *WorkspaceSpec {
	if in == nil {
		return nil
	}
	out := new(WorkspaceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceSpecCatalogRef) DeepCopyInto(out *WorkspaceSpecCatalogRef) {
	*out = *in
	if in.DryRun != nil {
		in, out := &in.DryRun, &out.DryRun
		*out = new(bool)
		**out = **in
	}
	if in.ItemIconURL != nil {
		in, out := &in.ItemIconURL, &out.ItemIconURL
		*out = new(string)
		**out = **in
	}
	if in.ItemID != nil {
		in, out := &in.ItemID, &out.ItemID
		*out = new(string)
		**out = **in
	}
	if in.ItemName != nil {
		in, out := &in.ItemName, &out.ItemName
		*out = new(string)
		**out = **in
	}
	if in.ItemReadmeURL != nil {
		in, out := &in.ItemReadmeURL, &out.ItemReadmeURL
		*out = new(string)
		**out = **in
	}
	if in.ItemURL != nil {
		in, out := &in.ItemURL, &out.ItemURL
		*out = new(string)
		**out = **in
	}
	if in.LaunchURL != nil {
		in, out := &in.LaunchURL, &out.LaunchURL
		*out = new(string)
		**out = **in
	}
	if in.OfferingVersion != nil {
		in, out := &in.OfferingVersion, &out.OfferingVersion
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceSpecCatalogRef.
func (in *WorkspaceSpecCatalogRef) DeepCopy() *WorkspaceSpecCatalogRef {
	if in == nil {
		return nil
	}
	out := new(WorkspaceSpecCatalogRef)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceSpecResource) DeepCopyInto(out *WorkspaceSpecResource) {
	*out = *in
	if in.AppliedShareddataIDS != nil {
		in, out := &in.AppliedShareddataIDS, &out.AppliedShareddataIDS
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.CatalogRef != nil {
		in, out := &in.CatalogRef, &out.CatalogRef
		*out = new(WorkspaceSpecCatalogRef)
		(*in).DeepCopyInto(*out)
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.CreatedBy != nil {
		in, out := &in.CreatedBy, &out.CreatedBy
		*out = new(string)
		**out = **in
	}
	if in.Crn != nil {
		in, out := &in.Crn, &out.Crn
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Frozen != nil {
		in, out := &in.Frozen, &out.Frozen
		*out = new(bool)
		**out = **in
	}
	if in.FrozenAt != nil {
		in, out := &in.FrozenAt, &out.FrozenAt
		*out = new(string)
		**out = **in
	}
	if in.FrozenBy != nil {
		in, out := &in.FrozenBy, &out.FrozenBy
		*out = new(string)
		**out = **in
	}
	if in.LastHealthCheckAt != nil {
		in, out := &in.LastHealthCheckAt, &out.LastHealthCheckAt
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Locked != nil {
		in, out := &in.Locked, &out.Locked
		*out = new(bool)
		**out = **in
	}
	if in.LockedBy != nil {
		in, out := &in.LockedBy, &out.LockedBy
		*out = new(string)
		**out = **in
	}
	if in.LockedTime != nil {
		in, out := &in.LockedTime, &out.LockedTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroup != nil {
		in, out := &in.ResourceGroup, &out.ResourceGroup
		*out = new(string)
		**out = **in
	}
	if in.RuntimeData != nil {
		in, out := &in.RuntimeData, &out.RuntimeData
		*out = make([]WorkspaceSpecRuntimeData, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SharedData != nil {
		in, out := &in.SharedData, &out.SharedData
		*out = new(WorkspaceSpecSharedData)
		(*in).DeepCopyInto(*out)
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.StatusCode != nil {
		in, out := &in.StatusCode, &out.StatusCode
		*out = new(string)
		**out = **in
	}
	if in.StatusMsg != nil {
		in, out := &in.StatusMsg, &out.StatusMsg
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.TemplateGitBranch != nil {
		in, out := &in.TemplateGitBranch, &out.TemplateGitBranch
		*out = new(string)
		**out = **in
	}
	if in.TemplateGitFolder != nil {
		in, out := &in.TemplateGitFolder, &out.TemplateGitFolder
		*out = new(string)
		**out = **in
	}
	if in.TemplateGitHasUploadedgitrepotar != nil {
		in, out := &in.TemplateGitHasUploadedgitrepotar, &out.TemplateGitHasUploadedgitrepotar
		*out = new(bool)
		**out = **in
	}
	if in.TemplateGitRelease != nil {
		in, out := &in.TemplateGitRelease, &out.TemplateGitRelease
		*out = new(string)
		**out = **in
	}
	if in.TemplateGitRepoShaValue != nil {
		in, out := &in.TemplateGitRepoShaValue, &out.TemplateGitRepoShaValue
		*out = new(string)
		**out = **in
	}
	if in.TemplateGitRepoURL != nil {
		in, out := &in.TemplateGitRepoURL, &out.TemplateGitRepoURL
		*out = new(string)
		**out = **in
	}
	if in.TemplateGitURL != nil {
		in, out := &in.TemplateGitURL, &out.TemplateGitURL
		*out = new(string)
		**out = **in
	}
	if in.TemplateInitStateFile != nil {
		in, out := &in.TemplateInitStateFile, &out.TemplateInitStateFile
		*out = new(string)
		**out = **in
	}
	if in.TemplateInputs != nil {
		in, out := &in.TemplateInputs, &out.TemplateInputs
		*out = make([]WorkspaceSpecTemplateInputs, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TemplateRef != nil {
		in, out := &in.TemplateRef, &out.TemplateRef
		*out = new(string)
		**out = **in
	}
	if in.TemplateType != nil {
		in, out := &in.TemplateType, &out.TemplateType
		*out = new(string)
		**out = **in
	}
	if in.TemplateUninstallScriptName != nil {
		in, out := &in.TemplateUninstallScriptName, &out.TemplateUninstallScriptName
		*out = new(string)
		**out = **in
	}
	if in.TemplateValues != nil {
		in, out := &in.TemplateValues, &out.TemplateValues
		*out = new(string)
		**out = **in
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		*out = new(string)
		**out = **in
	}
	if in.UpdatedBy != nil {
		in, out := &in.UpdatedBy, &out.UpdatedBy
		*out = new(string)
		**out = **in
	}
	if in.XGithubToken != nil {
		in, out := &in.XGithubToken, &out.XGithubToken
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceSpecResource.
func (in *WorkspaceSpecResource) DeepCopy() *WorkspaceSpecResource {
	if in == nil {
		return nil
	}
	out := new(WorkspaceSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceSpecRuntimeData) DeepCopyInto(out *WorkspaceSpecRuntimeData) {
	*out = *in
	if in.EngineCmd != nil {
		in, out := &in.EngineCmd, &out.EngineCmd
		*out = new(string)
		**out = **in
	}
	if in.EngineName != nil {
		in, out := &in.EngineName, &out.EngineName
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LogStoreURL != nil {
		in, out := &in.LogStoreURL, &out.LogStoreURL
		*out = new(string)
		**out = **in
	}
	if in.StateStoreURL != nil {
		in, out := &in.StateStoreURL, &out.StateStoreURL
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceSpecRuntimeData.
func (in *WorkspaceSpecRuntimeData) DeepCopy() *WorkspaceSpecRuntimeData {
	if in == nil {
		return nil
	}
	out := new(WorkspaceSpecRuntimeData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceSpecSharedData) DeepCopyInto(out *WorkspaceSpecSharedData) {
	*out = *in
	if in.ClusterCreatedOn != nil {
		in, out := &in.ClusterCreatedOn, &out.ClusterCreatedOn
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterName != nil {
		in, out := &in.ClusterName, &out.ClusterName
		*out = new(string)
		**out = **in
	}
	if in.ClusterType != nil {
		in, out := &in.ClusterType, &out.ClusterType
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.WorkerCount != nil {
		in, out := &in.WorkerCount, &out.WorkerCount
		*out = new(int64)
		**out = **in
	}
	if in.WorkerMachineType != nil {
		in, out := &in.WorkerMachineType, &out.WorkerMachineType
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceSpecSharedData.
func (in *WorkspaceSpecSharedData) DeepCopy() *WorkspaceSpecSharedData {
	if in == nil {
		return nil
	}
	out := new(WorkspaceSpecSharedData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceSpecTemplateInputs) DeepCopyInto(out *WorkspaceSpecTemplateInputs) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(bool)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UseDefault != nil {
		in, out := &in.UseDefault, &out.UseDefault
		*out = new(bool)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceSpecTemplateInputs.
func (in *WorkspaceSpecTemplateInputs) DeepCopy() *WorkspaceSpecTemplateInputs {
	if in == nil {
		return nil
	}
	out := new(WorkspaceSpecTemplateInputs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceStatus) DeepCopyInto(out *WorkspaceStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]apiv1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceStatus.
func (in *WorkspaceStatus) DeepCopy() *WorkspaceStatus {
	if in == nil {
		return nil
	}
	out := new(WorkspaceStatus)
	in.DeepCopyInto(out)
	return out
}
