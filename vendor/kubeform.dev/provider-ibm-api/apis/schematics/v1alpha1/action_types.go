/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Action struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ActionSpec   `json:"spec,omitempty"`
	Status            ActionStatus `json:"status,omitempty"`
}

type ActionSpecActionInputsMetadata struct {
	// List of aliases for the variable name.
	// +optional
	Aliases []string `json:"aliases,omitempty" tf:"aliases"`
	// Default value for the variable, if the override value is not specified.
	// +optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`
	// Description of the meta data.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Display name of the group this variable belongs to.
	// +optional
	GroupBy *string `json:"groupBy,omitempty" tf:"group_by"`
	// If true, the variable will not be displayed on UI or CLI.
	// +optional
	Hidden *bool `json:"hidden,omitempty" tf:"hidden"`
	// Is the variable readonly ?.
	// +optional
	Immutable *bool `json:"immutable,omitempty" tf:"immutable"`
	// Regex for the variable value.
	// +optional
	Matches *string `json:"matches,omitempty" tf:"matches"`
	// Maximum length of the variable value. Applicable for string type.
	// +optional
	MaxLength *int64 `json:"maxLength,omitempty" tf:"max_length"`
	// Maximum value of the variable. Applicable for integer type.
	// +optional
	MaxValue *int64 `json:"maxValue,omitempty" tf:"max_value"`
	// Minimum length of the variable value. Applicable for string type.
	// +optional
	MinLength *int64 `json:"minLength,omitempty" tf:"min_length"`
	// Minimum value of the variable. Applicable for integer type.
	// +optional
	MinValue *int64 `json:"minValue,omitempty" tf:"min_value"`
	// List of possible values for this variable.  If type is integer or date, then the array of string will be  converted to array of integers or date during runtime.
	// +optional
	Options []string `json:"options,omitempty" tf:"options"`
	// Relative position of this variable in a list.
	// +optional
	Position *int64 `json:"position,omitempty" tf:"position"`
	// Is the variable secure or sensitive ?.
	// +optional
	Secure *bool `json:"secure,omitempty" tf:"secure"`
	// Source of this meta-data.
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// Type of the variable.
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type ActionSpecActionInputs struct {
	// Reference link to the variable value By default the expression will point to self.value.
	// +optional
	Link *string `json:"link,omitempty" tf:"link"`
	// User editable metadata for the variables.
	// +optional
	Metadata []ActionSpecActionInputsMetadata `json:"metadata,omitempty" tf:"metadata"`
	// Name of the variable.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Value for the variable or reference to the value.
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type ActionSpecActionOutputsMetadata struct {
	// List of aliases for the variable name.
	// +optional
	Aliases []string `json:"aliases,omitempty" tf:"aliases"`
	// Default value for the variable, if the override value is not specified.
	// +optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`
	// Description of the meta data.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Display name of the group this variable belongs to.
	// +optional
	GroupBy *string `json:"groupBy,omitempty" tf:"group_by"`
	// If true, the variable will not be displayed on UI or CLI.
	// +optional
	Hidden *bool `json:"hidden,omitempty" tf:"hidden"`
	// Is the variable readonly ?.
	// +optional
	Immutable *bool `json:"immutable,omitempty" tf:"immutable"`
	// Regex for the variable value.
	// +optional
	Matches *string `json:"matches,omitempty" tf:"matches"`
	// Maximum length of the variable value. Applicable for string type.
	// +optional
	MaxLength *int64 `json:"maxLength,omitempty" tf:"max_length"`
	// Maximum value of the variable. Applicable for integer type.
	// +optional
	MaxValue *int64 `json:"maxValue,omitempty" tf:"max_value"`
	// Minimum length of the variable value. Applicable for string type.
	// +optional
	MinLength *int64 `json:"minLength,omitempty" tf:"min_length"`
	// Minimum value of the variable. Applicable for integer type.
	// +optional
	MinValue *int64 `json:"minValue,omitempty" tf:"min_value"`
	// List of possible values for this variable.  If type is integer or date, then the array of string will be  converted to array of integers or date during runtime.
	// +optional
	Options []string `json:"options,omitempty" tf:"options"`
	// Relative position of this variable in a list.
	// +optional
	Position *int64 `json:"position,omitempty" tf:"position"`
	// Is the variable secure or sensitive ?.
	// +optional
	Secure *bool `json:"secure,omitempty" tf:"secure"`
	// Source of this meta-data.
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// Type of the variable.
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type ActionSpecActionOutputs struct {
	// Reference link to the variable value By default the expression will point to self.value.
	// +optional
	Link *string `json:"link,omitempty" tf:"link"`
	// User editable metadata for the variables.
	// +optional
	Metadata []ActionSpecActionOutputsMetadata `json:"metadata,omitempty" tf:"metadata"`
	// Name of the variable.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Value for the variable or reference to the value.
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type ActionSpecBastionSysLock struct {
	// Is the Workspace locked by the Schematic action ?.
	// +optional
	SysLocked *bool `json:"sysLocked,omitempty" tf:"sys_locked"`
	// When the user performed the action that lead to lock the Workspace ?.
	// +optional
	SysLockedAt *string `json:"sysLockedAt,omitempty" tf:"sys_locked_at"`
	// Name of the user who performed the action, that lead to lock the Workspace.
	// +optional
	SysLockedBy *string `json:"sysLockedBy,omitempty" tf:"sys_locked_by"`
}

type ActionSpecBastion struct {
	// Targets creation time.
	// +optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`
	// E-mail address of the user who created the targets.
	// +optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by"`
	// Override credential for each resource.  Reference to credentials values, used by all the resources.
	// +optional
	CredentialRef *string `json:"credentialRef,omitempty" tf:"credential_ref"`
	// Target description.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Target ID.
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// Target name.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Array of the resource IDs.
	// +optional
	ResourceIDS []string `json:"resourceIDS,omitempty" tf:"resource_ids"`
	// Resource selection query string.
	// +optional
	ResourceQuery *string `json:"resourceQuery,omitempty" tf:"resource_query"`
	// System lock status.
	// +optional
	SysLock []ActionSpecBastionSysLock `json:"sysLock,omitempty" tf:"sys_lock"`
	// Target type (`cluster`, `vsi`, `icd`, `vpc`).
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// Targets updation time.
	// +optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at"`
	// E-mail address of user who updated the targets.
	// +optional
	UpdatedBy *string `json:"updatedBy,omitempty" tf:"updated_by"`
}

type ActionSpecCredentialsMetadata struct {
	// List of aliases for the variable name.
	// +optional
	Aliases []string `json:"aliases,omitempty" tf:"aliases"`
	// Default value for the variable, if the override value is not specified.
	// +optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`
	// Description of the meta data.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Display name of the group this variable belongs to.
	// +optional
	GroupBy *string `json:"groupBy,omitempty" tf:"group_by"`
	// If true, the variable will not be displayed on UI or CLI.
	// +optional
	Hidden *bool `json:"hidden,omitempty" tf:"hidden"`
	// Is the variable readonly ?.
	// +optional
	Immutable *bool `json:"immutable,omitempty" tf:"immutable"`
	// Regex for the variable value.
	// +optional
	Matches *string `json:"matches,omitempty" tf:"matches"`
	// Maximum length of the variable value. Applicable for string type.
	// +optional
	MaxLength *int64 `json:"maxLength,omitempty" tf:"max_length"`
	// Maximum value of the variable. Applicable for integer type.
	// +optional
	MaxValue *int64 `json:"maxValue,omitempty" tf:"max_value"`
	// Minimum length of the variable value. Applicable for string type.
	// +optional
	MinLength *int64 `json:"minLength,omitempty" tf:"min_length"`
	// Minimum value of the variable. Applicable for integer type.
	// +optional
	MinValue *int64 `json:"minValue,omitempty" tf:"min_value"`
	// List of possible values for this variable.  If type is integer or date, then the array of string will be  converted to array of integers or date during runtime.
	// +optional
	Options []string `json:"options,omitempty" tf:"options"`
	// Relative position of this variable in a list.
	// +optional
	Position *int64 `json:"position,omitempty" tf:"position"`
	// Is the variable secure or sensitive ?.
	// +optional
	Secure *bool `json:"secure,omitempty" tf:"secure"`
	// Source of this meta-data.
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// Type of the variable.
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type ActionSpecCredentials struct {
	// Reference link to the variable value By default the expression will point to self.value.
	// +optional
	Link *string `json:"link,omitempty" tf:"link"`
	// User editable metadata for the variables.
	// +optional
	Metadata []ActionSpecCredentialsMetadata `json:"metadata,omitempty" tf:"metadata"`
	// Name of the variable.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Value for the variable or reference to the value.
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type ActionSpecSettingsMetadata struct {
	// List of aliases for the variable name.
	// +optional
	Aliases []string `json:"aliases,omitempty" tf:"aliases"`
	// Default value for the variable, if the override value is not specified.
	// +optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`
	// Description of the meta data.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Display name of the group this variable belongs to.
	// +optional
	GroupBy *string `json:"groupBy,omitempty" tf:"group_by"`
	// If true, the variable will not be displayed on UI or CLI.
	// +optional
	Hidden *bool `json:"hidden,omitempty" tf:"hidden"`
	// Is the variable readonly ?.
	// +optional
	Immutable *bool `json:"immutable,omitempty" tf:"immutable"`
	// Regex for the variable value.
	// +optional
	Matches *string `json:"matches,omitempty" tf:"matches"`
	// Maximum length of the variable value. Applicable for string type.
	// +optional
	MaxLength *int64 `json:"maxLength,omitempty" tf:"max_length"`
	// Maximum value of the variable. Applicable for integer type.
	// +optional
	MaxValue *int64 `json:"maxValue,omitempty" tf:"max_value"`
	// Minimum length of the variable value. Applicable for string type.
	// +optional
	MinLength *int64 `json:"minLength,omitempty" tf:"min_length"`
	// Minimum value of the variable. Applicable for integer type.
	// +optional
	MinValue *int64 `json:"minValue,omitempty" tf:"min_value"`
	// List of possible values for this variable.  If type is integer or date, then the array of string will be  converted to array of integers or date during runtime.
	// +optional
	Options []string `json:"options,omitempty" tf:"options"`
	// Relative position of this variable in a list.
	// +optional
	Position *int64 `json:"position,omitempty" tf:"position"`
	// Is the variable secure or sensitive ?.
	// +optional
	Secure *bool `json:"secure,omitempty" tf:"secure"`
	// Source of this meta-data.
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// Type of the variable.
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type ActionSpecSettings struct {
	// Reference link to the variable value By default the expression will point to self.value.
	// +optional
	Link *string `json:"link,omitempty" tf:"link"`
	// User editable metadata for the variables.
	// +optional
	Metadata []ActionSpecSettingsMetadata `json:"metadata,omitempty" tf:"metadata"`
	// Name of the variable.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Value for the variable or reference to the value.
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type ActionSpecSourceGit struct {
	// Name of the branch, used to fetch the Git Repo.
	// +optional
	GitBranch *string `json:"gitBranch,omitempty" tf:"git_branch"`
	// Name of the release tag, used to fetch the Git Repo.
	// +optional
	GitRelease *string `json:"gitRelease,omitempty" tf:"git_release"`
	// Name of the folder in the Git Repo, that contains the template.
	// +optional
	GitRepoFolder *string `json:"gitRepoFolder,omitempty" tf:"git_repo_folder"`
	// URL to the GIT Repo that can be used to clone the template.
	// +optional
	GitRepoURL *string `json:"gitRepoURL,omitempty" tf:"git_repo_url"`
	// Personal Access Token to connect to Git URLs.
	// +optional
	GitToken *string `json:"gitToken,omitempty" tf:"git_token"`
}

type ActionSpecSource struct {
	// Connection details to Git source.
	// +optional
	Git []ActionSpecSourceGit `json:"git,omitempty" tf:"git"`
	// Type of source for the Template.
	SourceType *string `json:"sourceType" tf:"source_type"`
}

type ActionSpecState struct {
	// Status of automation (workspace or action).
	// +optional
	StatusCode *string `json:"statusCode,omitempty" tf:"status_code"`
	// Job id reference for this status.
	// +optional
	StatusJobID *string `json:"statusJobID,omitempty" tf:"status_job_id"`
	// Automation status message - to be displayed along with the status_code.
	// +optional
	StatusMessage *string `json:"statusMessage,omitempty" tf:"status_message"`
}

type ActionSpecSysLock struct {
	// Is the Workspace locked by the Schematic action ?.
	// +optional
	SysLocked *bool `json:"sysLocked,omitempty" tf:"sys_locked"`
	// When the user performed the action that lead to lock the Workspace ?.
	// +optional
	SysLockedAt *string `json:"sysLockedAt,omitempty" tf:"sys_locked_at"`
	// Name of the user who performed the action, that lead to lock the Workspace.
	// +optional
	SysLockedBy *string `json:"sysLockedBy,omitempty" tf:"sys_locked_by"`
}

type ActionSpecUserState struct {
	// When the user who set the state of an Object.
	// +optional
	SetAt *string `json:"setAt,omitempty" tf:"set_at"`
	// Name of the user who set the state of an Object.
	// +optional
	SetBy *string `json:"setBy,omitempty" tf:"set_by"`
	// User defined states  * `draft` Object can be modified, and can be used by jobs run by an author, during execution  * `live` Object can be modified, and can be used by jobs during execution  * `locked` Object cannot be modified, and can be used by jobs during execution  * `disable` Object can be modified, and cannot be used by Jobs during execution.
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
}

type ActionSpec struct {
	State *ActionSpecResource `json:"state,omitempty" tf:"-"`

	Resource ActionSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ActionSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Action account ID.
	// +optional
	Account *string `json:"account,omitempty" tf:"account"`
	// Input variables for an action.
	// +optional
	ActionInputs []ActionSpecActionInputs `json:"actionInputs,omitempty" tf:"action_inputs"`
	// Output variables for an action.
	// +optional
	ActionOutputs []ActionSpecActionOutputs `json:"actionOutputs,omitempty" tf:"action_outputs"`
	// Complete target details with the user inputs and the system generated data.
	// +optional
	Bastion []ActionSpecBastion `json:"bastion,omitempty" tf:"bastion"`
	// Schematics job command parameter (playbook-name, capsule-name or flow-name).
	// +optional
	CommandParameter *string `json:"commandParameter,omitempty" tf:"command_parameter"`
	// Action creation time.
	// +optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`
	// E-mail address of the user who created an action.
	// +optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by"`
	// credentials of the Action.
	// +optional
	Credentials []ActionSpecCredentials `json:"credentials,omitempty" tf:"credentials"`
	// Action Cloud Resource Name.
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// Action description.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// List of action locations supported by IBM Cloud Schematics service.  **Note** this does not limit the location of the resources provisioned using Schematics.
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// Action name (unique for an account).
	Name *string `json:"name" tf:"name"`
	// Name of the namespace.
	// +optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace"`
	// Playbook names retrieved from the respository.
	// +optional
	PlaybookNames []string `json:"playbookNames,omitempty" tf:"playbook_names"`
	// Resource-group name for an action.  By default, action is created in default resource group.
	// +optional
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group"`
	// Environment variables for an action.
	// +optional
	Settings []ActionSpecSettings `json:"settings,omitempty" tf:"settings"`
	// Source of templates, playbooks, or controls.
	// +optional
	Source []ActionSpecSource `json:"source,omitempty" tf:"source"`
	// Action Playbook Source creation time.
	// +optional
	SourceCreatedAt *string `json:"sourceCreatedAt,omitempty" tf:"source_created_at"`
	// E-mail address of user who created the Action Playbook Source.
	// +optional
	SourceCreatedBy *string `json:"sourceCreatedBy,omitempty" tf:"source_created_by"`
	// URL of the `README` file, for the source.
	// +optional
	SourceReadmeURL *string `json:"sourceReadmeURL,omitempty" tf:"source_readme_url"`
	// Type of source for the Template.
	// +optional
	SourceType *string `json:"sourceType,omitempty" tf:"source_type"`
	// The action playbook updation time.
	// +optional
	SourceUpdatedAt *string `json:"sourceUpdatedAt,omitempty" tf:"source_updated_at"`
	// E-mail address of user who updated the action playbook source.
	// +optional
	SourceUpdatedBy *string `json:"sourceUpdatedBy,omitempty" tf:"source_updated_by"`
	// Computed state of an action.
	// +optional
	State []ActionSpecState `json:"state,omitempty" tf:"state"`
	// System lock status.
	// +optional
	SysLock []ActionSpecSysLock `json:"sysLock,omitempty" tf:"sys_lock"`
	// Action tags.
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Inventory of host and host group for the playbook in `INI` file format. For example, `"targets_ini": "[webserverhost]  172.22.192.6  [dbhost]  172.22.192.5"`. For more information, about an inventory host group syntax, see [Inventory host groups](/docs/schematics?topic=schematics-schematics-cli-reference#schematics-inventory-host-grps).
	// +optional
	TargetsIni *string `json:"targetsIni,omitempty" tf:"targets_ini"`
	// ID to the trigger.
	// +optional
	TriggerRecordID *string `json:"triggerRecordID,omitempty" tf:"trigger_record_id"`
	// Action updation time.
	// +optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at"`
	// E-mail address of the user who updated an action.
	// +optional
	UpdatedBy *string `json:"updatedBy,omitempty" tf:"updated_by"`
	// User defined status of the Schematics object.
	// +optional
	UserState []ActionSpecUserState `json:"userState,omitempty" tf:"user_state"`
	// The personal access token to authenticate with your private GitHub or GitLab repository and access your Terraform template.
	// +optional
	XGithubToken *string `json:"xGithubToken,omitempty" tf:"x_github_token"`
}

type ActionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ActionList is a list of Actions
type ActionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Action CRD objects
	Items []Action `json:"items,omitempty"`
}
