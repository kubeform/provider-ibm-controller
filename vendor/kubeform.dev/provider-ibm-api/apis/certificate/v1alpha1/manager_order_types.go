/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ManagerOrder struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagerOrderSpec   `json:"spec,omitempty"`
	Status            ManagerOrderStatus `json:"status,omitempty"`
}

type ManagerOrderSpec struct {
	State *ManagerOrderSpecResource `json:"state,omitempty" tf:"-"`

	Resource ManagerOrderSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ManagerOrderSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Algorithm info
	// +optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm"`
	// +optional
	AutoRenewEnabled *bool `json:"autoRenewEnabled,omitempty" tf:"auto_renew_enabled"`
	// Cerificate validity from date
	// +optional
	BeginsOn *int64 `json:"beginsOn,omitempty" tf:"begins_on"`
	// Certificate manager instance ID
	CertificateManagerInstanceID *string `json:"certificateManagerInstanceID" tf:"certificate_manager_instance_id"`
	// Certicate description
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// DNS provider instance CRN
	// +optional
	DnsProviderInstanceCrn *string `json:"dnsProviderInstanceCrn,omitempty" tf:"dns_provider_instance_crn"`
	// Domain validation methods
	// +optional
	DomainValidationMethod *string `json:"domainValidationMethod,omitempty" tf:"domain_validation_method"`
	// List of domain names
	Domains []string `json:"domains" tf:"domains"`
	// Certificaet expairy date
	// +optional
	ExpiresOn *int64 `json:"expiresOn,omitempty" tf:"expires_on"`
	// Has Previous
	// +optional
	HasPrevious *bool `json:"hasPrevious,omitempty" tf:"has_previous"`
	// set to true if certificate is imported
	// +optional
	Imported *bool `json:"imported,omitempty" tf:"imported"`
	// +optional
	IssuanceInfo map[string]string `json:"issuanceInfo,omitempty" tf:"issuance_info"`
	// Certificate issuer info
	// +optional
	Issuer *string `json:"issuer,omitempty" tf:"issuer"`
	// Keyalgorithm info
	// +optional
	KeyAlgorithm *string `json:"keyAlgorithm,omitempty" tf:"key_algorithm"`
	// Certificate name
	Name *string `json:"name" tf:"name"`
	// Invokes renew functionality
	// +optional
	RenewCertificate *bool `json:"renewCertificate,omitempty" tf:"renew_certificate"`
	// Keys are sorated if set to true
	// +optional
	RotateKeys *bool `json:"rotateKeys,omitempty" tf:"rotate_keys"`
	// Status  of the certificate
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type ManagerOrderStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ManagerOrderList is a list of ManagerOrders
type ManagerOrderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ManagerOrder CRD objects
	Items []ManagerOrder `json:"items,omitempty"`
}
