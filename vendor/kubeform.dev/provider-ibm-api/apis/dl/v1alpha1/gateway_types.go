/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Gateway struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewaySpec   `json:"spec,omitempty"`
	Status            GatewayStatus `json:"status,omitempty"`
}

type GatewaySpecMacsecConfig struct {
	// Indicate whether MACsec protection should be active (true) or inactive (false) for this MACsec enabled gateway
	Active *bool `json:"active" tf:"active"`
	// Active connectivity association key.
	// +optional
	ActiveCak *string `json:"activeCak,omitempty" tf:"active_cak"`
	// SAK cipher suite
	// +optional
	CipherSuite *string `json:"cipherSuite,omitempty" tf:"cipher_suite"`
	// Confidentiality Offset
	// +optional
	ConfidentialityOffset *int64 `json:"confidentialityOffset,omitempty" tf:"confidentiality_offset"`
	// Cryptographic Algorithm
	// +optional
	CryptographicAlgorithm *string `json:"cryptographicAlgorithm,omitempty" tf:"cryptographic_algorithm"`
	// Fallback connectivity association key. Keys used for MACsec configuration must have names with an even number of characters from [0-9a-fA-F]
	// +optional
	FallbackCak *string `json:"fallbackCak,omitempty" tf:"fallback_cak"`
	// Key Server Priority
	// +optional
	KeyServerPriority *int64 `json:"keyServerPriority,omitempty" tf:"key_server_priority"`
	// Desired primary connectivity association key. Keys for a MACsec configuration must have names with an even number of characters from [0-9a-fA-F]
	PrimaryCak *string `json:"primaryCak" tf:"primary_cak"`
	// Secure Association Key (SAK) expiry time in seconds
	// +optional
	SakExpiryTime *int64 `json:"sakExpiryTime,omitempty" tf:"sak_expiry_time"`
	// Packets without MACsec headers are not dropped when security_policy is should_secure.
	// +optional
	SecurityPolicy *string `json:"securityPolicy,omitempty" tf:"security_policy"`
	// The current status of MACsec on the device for this gateway
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// Replay protection window size
	// +optional
	WindowSize *int64 `json:"windowSize,omitempty" tf:"window_size"`
}

type GatewaySpec struct {
	State *GatewaySpecResource `json:"state,omitempty" tf:"-"`

	Resource GatewaySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type GatewaySpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// BGP MD5 authentication key
	// +optional
	AuthenticationKey *string `json:"authenticationKey,omitempty" tf:"authentication_key"`
	// BGP ASN
	BgpAsn *int64 `json:"bgpAsn" tf:"bgp_asn"`
	// BGP base CIDR
	// +optional
	BgpBaseCIDR *string `json:"bgpBaseCIDR,omitempty" tf:"bgp_base_cidr"`
	// BGP customer edge router CIDR
	// +optional
	BgpCerCIDR *string `json:"bgpCerCIDR,omitempty" tf:"bgp_cer_cidr"`
	// IBM BGP ASN
	// +optional
	BgpIbmAsn *int64 `json:"bgpIbmAsn,omitempty" tf:"bgp_ibm_asn"`
	// BGP IBM CIDR
	// +optional
	BgpIbmCIDR *string `json:"bgpIbmCIDR,omitempty" tf:"bgp_ibm_cidr"`
	// Gateway BGP status
	// +optional
	BgpStatus *string `json:"bgpStatus,omitempty" tf:"bgp_status"`
	// Carrier name
	// +optional
	CarrierName *string `json:"carrierName,omitempty" tf:"carrier_name"`
	// Changes pending approval for provider managed Direct Link Connect gateways
	// +optional
	ChangeRequest *string `json:"changeRequest,omitempty" tf:"change_request"`
	// Reason for completion notice rejection
	// +optional
	CompletionNoticeRejectReason *string `json:"completionNoticeRejectReason,omitempty" tf:"completion_notice_reject_reason"`
	// The date and time resource was created
	// +optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`
	// The CRN (Cloud Resource Name) of this gateway
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// Cross connect router
	// +optional
	CrossConnectRouter *string `json:"crossConnectRouter,omitempty" tf:"cross_connect_router"`
	// Customer name
	// +optional
	CustomerName *string `json:"customerName,omitempty" tf:"customer_name"`
	// Gateways with global routing (true) can connect to networks outside their associated region
	Global *bool `json:"global" tf:"global"`
	// Gateway link status
	// +optional
	LinkStatus *string `json:"linkStatus,omitempty" tf:"link_status"`
	// Loa reject reason
	// +optional
	LoaRejectReason *string `json:"loaRejectReason,omitempty" tf:"loa_reject_reason"`
	// Gateway location long name
	// +optional
	LocationDisplayName *string `json:"locationDisplayName,omitempty" tf:"location_display_name"`
	// Gateway location
	// +optional
	LocationName *string `json:"locationName,omitempty" tf:"location_name"`
	// MACsec configuration information
	// +optional
	MacsecConfig *GatewaySpecMacsecConfig `json:"macsecConfig,omitempty" tf:"macsec_config"`
	// Metered billing option
	Metered *bool `json:"metered" tf:"metered"`
	// The unique user-defined name for this gateway
	Name *string `json:"name" tf:"name"`
	// Gateway operational status
	// +optional
	OperationalStatus *string `json:"operationalStatus,omitempty" tf:"operational_status"`
	// Gateway port
	// +optional
	Port *string `json:"port,omitempty" tf:"port"`
	// Indicates whether gateway was created through a provider portal
	// +optional
	ProviderAPIManaged *bool `json:"providerAPIManaged,omitempty" tf:"provider_api_managed"`
	// The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
	// +optional
	ResourceControllerURL *string `json:"resourceControllerURL,omitempty" tf:"resource_controller_url"`
	// The crn of the resource
	// +optional
	ResourceCrn *string `json:"resourceCrn,omitempty" tf:"resource_crn"`
	// Gateway resource group
	// +optional
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group"`
	// The resource group name in which resource is provisioned
	// +optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name"`
	// The name of the resource
	// +optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name"`
	// The status of the resource
	// +optional
	ResourceStatus *string `json:"resourceStatus,omitempty" tf:"resource_status"`
	// Gateway speed in megabits per second
	SpeedMbps *int64 `json:"speedMbps" tf:"speed_mbps"`
	// Tags for the direct link gateway
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Gateway type
	Type *string `json:"type" tf:"type"`
	// VLAN allocated for this gateway
	// +optional
	Vlan *int64 `json:"vlan,omitempty" tf:"vlan"`
}

type GatewayStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GatewayList is a list of Gateways
type GatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Gateway CRD objects
	Items []Gateway `json:"items,omitempty"`
}
