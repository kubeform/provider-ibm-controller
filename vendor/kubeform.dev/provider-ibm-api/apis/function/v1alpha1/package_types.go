/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Package struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PackageSpec   `json:"spec,omitempty"`
	Status            PackageStatus `json:"status,omitempty"`
}

type PackageSpec struct {
	State *PackageSpecResource `json:"state,omitempty" tf:"-"`

	Resource PackageSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type PackageSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// All annotations set on package by user and those set by the IBM Cloud Function backend/API.
	// +optional
	Annotations *string `json:"annotations,omitempty" tf:"annotations"`
	// Name of package to be binded.
	// +optional
	BindPackageName *string `json:"bindPackageName,omitempty" tf:"bind_package_name"`
	// Name of package.
	Name *string `json:"name" tf:"name"`
	// IBM Cloud function namespace.
	Namespace *string `json:"namespace" tf:"namespace"`
	// +optional
	PackageID *string `json:"packageID,omitempty" tf:"package_id"`
	// All parameters set on package by user and those set by the IBM Cloud Function backend/API.
	// +optional
	Parameters *string `json:"parameters,omitempty" tf:"parameters"`
	// Package visibilty.
	// +optional
	Publish *bool `json:"publish,omitempty" tf:"publish"`
	// Annotation values in KEY VALUE format.
	// +optional
	UserDefinedAnnotations *string `json:"userDefinedAnnotations,omitempty" tf:"user_defined_annotations"`
	// Parameters values in KEY VALUE format. Parameter bindings included in the context passed to the package.
	// +optional
	UserDefinedParameters *string `json:"userDefinedParameters,omitempty" tf:"user_defined_parameters"`
	// Semantic version of the item.
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type PackageStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PackageList is a list of Packages
type PackageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Package CRD objects
	Items []Package `json:"items,omitempty"`
}
