/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type OfferingInstance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OfferingInstanceSpec   `json:"spec,omitempty"`
	Status            OfferingInstanceStatus `json:"status,omitempty"`
}

type OfferingInstanceSpec struct {
	State *OfferingInstanceSpecResource `json:"state,omitempty" tf:"-"`

	Resource OfferingInstanceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type OfferingInstanceSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Catalog ID this instance was created from.
	CatalogID *string `json:"catalogID" tf:"catalog_id"`
	// channel to target for the operator subscription. Required for operator bundles
	// +optional
	Channel *string `json:"channel,omitempty" tf:"channel"`
	// designate to install into all namespaces.
	ClusterAllNamespaces *bool `json:"clusterAllNamespaces" tf:"cluster_all_namespaces"`
	// Cluster ID.
	ClusterID *string `json:"clusterID" tf:"cluster_id"`
	// List of target namespaces to install into.
	ClusterNamespaces []string `json:"clusterNamespaces" tf:"cluster_namespaces"`
	// Cluster region (e.g., us-south).
	ClusterRegion *string `json:"clusterRegion" tf:"cluster_region"`
	// platform CRN for this instance.
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// install plan for the subscription of the operator- can be either automatic or manual. Required for operator bundles
	// +optional
	InstallPlan *string `json:"installPlan,omitempty" tf:"install_plan"`
	// the format this instance has (helm, operator, ova...).
	KindFormat *string `json:"kindFormat" tf:"kind_format"`
	// the label for this instance.
	Label *string `json:"label" tf:"label"`
	// Offering ID this instance was created from.
	OfferingID *string `json:"offeringID" tf:"offering_id"`
	// id of the resource group
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
	// id of the schematics workspace, for offerings installed through schematics
	// +optional
	SchematicsWorkspaceID *string `json:"schematicsWorkspaceID,omitempty" tf:"schematics_workspace_id"`
	// url reference to this object.
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
	// The version this instance was installed from (not version id).
	Version *string `json:"version" tf:"version"`
	// Whether to wait until the offering instance successfully provisions, or to return when accepted
	// +optional
	WaitUntilSuccessful *bool `json:"waitUntilSuccessful,omitempty" tf:"wait_until_successful"`
}

type OfferingInstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// OfferingInstanceList is a list of OfferingInstances
type OfferingInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of OfferingInstance CRD objects
	Items []OfferingInstance `json:"items,omitempty"`
}
