/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Catalog struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CatalogSpec   `json:"spec,omitempty"`
	Status            CatalogStatus `json:"status,omitempty"`
}

type CatalogSpec struct {
	State *CatalogSpecResource `json:"state,omitempty" tf:"-"`

	Resource CatalogSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type CatalogSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// URL for an icon associated with this catalog.
	// +optional
	CatalogIconURL *string `json:"catalogIconURL,omitempty" tf:"catalog_icon_url"`
	// CRN associated with the catalog.
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// Display Name in the requested language.
	Label *string `json:"label" tf:"label"`
	// URL path to offerings.
	// +optional
	OfferingsURL *string `json:"offeringsURL,omitempty" tf:"offerings_url"`
	// Description in the requested language.
	// +optional
	ShortDescription *string `json:"shortDescription,omitempty" tf:"short_description"`
	// List of tags associated with this catalog.
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// The url for this specific catalog.
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type CatalogStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CatalogList is a list of Catalogs
type CatalogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Catalog CRD objects
	Items []Catalog `json:"items,omitempty"`
}
