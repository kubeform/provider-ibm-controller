/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Offering struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OfferingSpec   `json:"spec,omitempty"`
	Status            OfferingStatus `json:"status,omitempty"`
}

type OfferingSpecRepoInfo struct {
	// Token for private repos.
	// +optional
	Token *string `json:"token,omitempty" tf:"token"`
	// Public or enterprise GitHub.
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type OfferingSpec struct {
	State *OfferingSpecResource `json:"state,omitempty" tf:"-"`

	Resource OfferingSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type OfferingSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The id of the catalog containing this offering.
	CatalogID *string `json:"catalogID" tf:"catalog_id"`
	// The name of the catalog.
	// +optional
	CatalogName *string `json:"catalogName,omitempty" tf:"catalog_name"`
	// The crn for this specific offering.
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// A disclaimer for this offering.
	// +optional
	Disclaimer *string `json:"disclaimer,omitempty" tf:"disclaimer"`
	// Determine if this offering should be displayed in the Consumption UI.
	// +optional
	Hidden *bool `json:"hidden,omitempty" tf:"hidden"`
	// Indicates if this offering has been approved for use by all IBMers.
	// +optional
	IbmPublishApproved *bool `json:"ibmPublishApproved,omitempty" tf:"ibm_publish_approved"`
	// Display Name in the requested language.
	Label *string `json:"label" tf:"label"`
	// Long description in the requested language.
	// +optional
	LongDescription *string `json:"longDescription,omitempty" tf:"long_description"`
	// The programmatic name of this offering.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// URL for an additional docs with this offering.
	// +optional
	OfferingDocsURL *string `json:"offeringDocsURL,omitempty" tf:"offering_docs_url"`
	// URL for an icon associated with this offering.
	// +optional
	OfferingIconURL *string `json:"offeringIconURL,omitempty" tf:"offering_icon_url"`
	// The id of the catalog containing this offering.
	// +optional
	OfferingID *string `json:"offeringID,omitempty" tf:"offering_id"`
	// URL to be displayed in the Consumption UI for getting support on this offering.
	// +optional
	OfferingSupportURL *string `json:"offeringSupportURL,omitempty" tf:"offering_support_url"`
	// Is it permitted to request publishing to IBM or Public.
	// +optional
	PermitRequestIbmPublicPublish *bool `json:"permitRequestIbmPublicPublish,omitempty" tf:"permit_request_ibm_public_publish"`
	// The portal's approval record ID.
	// +optional
	PortalApprovalRecord *string `json:"portalApprovalRecord,omitempty" tf:"portal_approval_record"`
	// The portal UI URL.
	// +optional
	PortalUiURL *string `json:"portalUiURL,omitempty" tf:"portal_ui_url"`
	// The original offering CRN that this publish entry came from.
	// +optional
	PublicOriginalCrn *string `json:"publicOriginalCrn,omitempty" tf:"public_original_crn"`
	// Indicates if this offering has been approved for use by all IBM Cloud users.
	// +optional
	PublicPublishApproved *bool `json:"publicPublishApproved,omitempty" tf:"public_publish_approved"`
	// The crn of the public catalog entry of this offering.
	// +optional
	PublishPublicCrn *string `json:"publishPublicCrn,omitempty" tf:"publish_public_crn"`
	// Repository info for offerings.
	// +optional
	RepoInfo []OfferingSpecRepoInfo `json:"repoInfo,omitempty" tf:"repo_info"`
	// Short description in the requested language.
	// +optional
	ShortDescription *string `json:"shortDescription,omitempty" tf:"short_description"`
	// List of tags associated with this catalog.
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// The url for this specific offering.
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type OfferingStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// OfferingList is a list of Offerings
type OfferingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Offering CRD objects
	Items []Offering `json:"items,omitempty"`
}
