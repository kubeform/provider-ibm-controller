/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Version struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VersionSpec   `json:"spec,omitempty"`
	Status            VersionStatus `json:"status,omitempty"`
}

type VersionSpec struct {
	State *VersionSpecResource `json:"state,omitempty" tf:"-"`

	Resource VersionSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type VersionSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Catalog ID.
	// +optional
	CatalogID *string `json:"catalogID,omitempty" tf:"catalog_id"`
	// Catalog identifier.
	CatalogIdentifier *string `json:"catalogIdentifier" tf:"catalog_identifier"`
	// byte array representing the content to be imported.  Only supported for OVA images at this time.
	// +optional
	Content *string `json:"content,omitempty" tf:"content"`
	// The date and time this version was created.
	// +optional
	Created *string `json:"created,omitempty" tf:"created"`
	// Version's CRN.
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// Kind ID.
	// +optional
	KindID *string `json:"kindID,omitempty" tf:"kind_id"`
	// Offering identification.
	OfferingID *string `json:"offeringID" tf:"offering_id"`
	// Content's repo URL.
	// +optional
	RepoURL *string `json:"repoURL,omitempty" tf:"repo_url"`
	// hash of the content.
	// +optional
	Sha *string `json:"sha,omitempty" tf:"sha"`
	// Content's source URL (e.g git repo).
	// +optional
	SourceURL *string `json:"sourceURL,omitempty" tf:"source_url"`
	// Tags array.
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Target kinds.  Current valid values are 'iks', 'roks', 'vcenter', and 'terraform'.
	// +optional
	TargetKinds []string `json:"targetKinds,omitempty" tf:"target_kinds"`
	// The semver value for this new version, if not found in the zip url package content.
	// +optional
	TargetVersion *string `json:"targetVersion,omitempty" tf:"target_version"`
	// File used to on-board this version.
	// +optional
	TgzURL *string `json:"tgzURL,omitempty" tf:"tgz_url"`
	// The date and time this version was last updated.
	// +optional
	Updated *string `json:"updated,omitempty" tf:"updated"`
	// Version of content type.
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
	// URL path to zip location.  If not specified, must provide content in the body of this call.
	// +optional
	Zipurl *string `json:"zipurl,omitempty" tf:"zipurl"`
}

type VersionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VersionList is a list of Versions
type VersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Version CRD objects
	Items []Version `json:"items,omitempty"`
}
