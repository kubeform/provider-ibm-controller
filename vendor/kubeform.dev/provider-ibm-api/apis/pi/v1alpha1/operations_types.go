/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Operations struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OperationsSpec   `json:"spec,omitempty"`
	Status            OperationsStatus `json:"status,omitempty"`
}

type OperationsSpecAddresses struct {
	// +optional
	Ip *string `json:"ip,omitempty" tf:"ip"`
	// +optional
	Macaddress *string `json:"macaddress,omitempty" tf:"macaddress"`
	// +optional
	Networkid *string `json:"networkid,omitempty" tf:"networkid"`
	// +optional
	Networkname *string `json:"networkname,omitempty" tf:"networkname"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type OperationsSpec struct {
	State *OperationsSpecResource `json:"state,omitempty" tf:"-"`

	Resource OperationsSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type OperationsSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Addresses []OperationsSpecAddresses `json:"addresses,omitempty" tf:"addresses"`
	// PI Cloud instnce id
	PiCloudInstanceID *string `json:"piCloudInstanceID" tf:"pi_cloud_instance_id"`
	// PI instance health status
	// +optional
	PiHealthStatus *string `json:"piHealthStatus,omitempty" tf:"pi_health_status"`
	// PI instance Operation server name
	PiInstanceName *string `json:"piInstanceName" tf:"pi_instance_name"`
	// PI instance operation type
	PiOperation *string `json:"piOperation" tf:"pi_operation"`
	// Progress of the operation
	// +optional
	PiProgress *float64 `json:"piProgress,omitempty" tf:"pi_progress"`
	// PI instance operation status
	// +optional
	PiStatus *string `json:"piStatus,omitempty" tf:"pi_status"`
}

type OperationsStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// OperationsList is a list of Operationss
type OperationsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Operations CRD objects
	Items []Operations `json:"items,omitempty"`
}
