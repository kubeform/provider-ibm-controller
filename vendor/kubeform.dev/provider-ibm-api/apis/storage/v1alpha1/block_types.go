/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Block struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BlockSpec   `json:"spec,omitempty"`
	Status            BlockStatus `json:"status,omitempty"`
}

type BlockSpecAllowedHardwareInfo struct {
	// +optional
	HostIqn *string `json:"hostIqn,omitempty" tf:"host_iqn"`
	// +optional
	ID *int64 `json:"ID,omitempty" tf:"id"`
	// +optional
	Password *string `json:"password,omitempty" tf:"password"`
	// +optional
	Username *string `json:"username,omitempty" tf:"username"`
}

type BlockSpecAllowedHostInfo struct {
	// +optional
	HostIqn *string `json:"hostIqn,omitempty" tf:"host_iqn"`
	// +optional
	ID *int64 `json:"ID,omitempty" tf:"id"`
	// +optional
	Password *string `json:"password,omitempty" tf:"password"`
	// +optional
	Username *string `json:"username,omitempty" tf:"username"`
}

type BlockSpecAllowedVirtualGuestInfo struct {
	// +optional
	HostIqn *string `json:"hostIqn,omitempty" tf:"host_iqn"`
	// +optional
	ID *int64 `json:"ID,omitempty" tf:"id"`
	// +optional
	Password *string `json:"password,omitempty" tf:"password"`
	// +optional
	Username *string `json:"username,omitempty" tf:"username"`
}

type BlockSpec struct {
	State *BlockSpecResource `json:"state,omitempty" tf:"-"`

	Resource BlockSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type BlockSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// List of allowe hardware IDs
	// +optional
	AllowedHardwareIDS []int64 `json:"allowedHardwareIDS,omitempty" tf:"allowed_hardware_ids"`
	// +optional
	// Deprecated
	AllowedHardwareInfo []BlockSpecAllowedHardwareInfo `json:"allowedHardwareInfo,omitempty" tf:"allowed_hardware_info"`
	// +optional
	AllowedHostInfo []BlockSpecAllowedHostInfo `json:"allowedHostInfo,omitempty" tf:"allowed_host_info"`
	// Allowed IP addresses
	// +optional
	AllowedIPAddresses []string `json:"allowedIPAddresses,omitempty" tf:"allowed_ip_addresses"`
	// List of allowed virtual guest IDs
	// +optional
	AllowedVirtualGuestIDS []int64 `json:"allowedVirtualGuestIDS,omitempty" tf:"allowed_virtual_guest_ids"`
	// +optional
	// Deprecated
	AllowedVirtualGuestInfo []BlockSpecAllowedVirtualGuestInfo `json:"allowedVirtualGuestInfo,omitempty" tf:"allowed_virtual_guest_info"`
	// Storage block size
	Capacity *int64 `json:"capacity" tf:"capacity"`
	// Datacenter name
	Datacenter *string `json:"datacenter" tf:"datacenter"`
	// Hostname
	// +optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname"`
	// Billing done hourly, if set to true
	// +optional
	HourlyBilling *bool `json:"hourlyBilling,omitempty" tf:"hourly_billing"`
	// IOPS value required
	Iops *float64 `json:"iops" tf:"iops"`
	// LUN Id
	// +optional
	Lunid *string `json:"lunid,omitempty" tf:"lunid"`
	// Additional note info
	// +optional
	Notes *string `json:"notes,omitempty" tf:"notes"`
	// OS formatr type
	OsFormatType *string `json:"osFormatType" tf:"os_format_type"`
	// The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
	// +optional
	ResourceControllerURL *string `json:"resourceControllerURL,omitempty" tf:"resource_controller_url"`
	// The name of the resource
	// +optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name"`
	// Snapshot capacity in GB
	// +optional
	SnapshotCapacity *int64 `json:"snapshotCapacity,omitempty" tf:"snapshot_capacity"`
	// List of tags associated with the resource
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// List of target Addresses
	// +optional
	TargetAddress []string `json:"targetAddress,omitempty" tf:"target_address"`
	// Storage block type
	Type *string `json:"type" tf:"type"`
	// Volume name
	// +optional
	Volumename *string `json:"volumename,omitempty" tf:"volumename"`
}

type BlockStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BlockList is a list of Blocks
type BlockList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Block CRD objects
	Items []Block `json:"items,omitempty"`
}
