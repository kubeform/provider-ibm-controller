/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DnsRecord struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnsRecordSpec   `json:"spec,omitempty"`
	Status            DnsRecordStatus `json:"status,omitempty"`
}

type DnsRecordSpec struct {
	State *DnsRecordSpecResource `json:"state,omitempty" tf:"-"`

	Resource DnsRecordSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DnsRecordSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// CIS object id or CRN
	CisID *string `json:"cisID" tf:"cis_id"`
	// DNS record content
	// +optional
	Content *string `json:"content,omitempty" tf:"content"`
	// +optional
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on"`
	// +optional
	Data map[string]string `json:"data,omitempty" tf:"data"`
	// Associated CIS domain
	DomainID *string `json:"domainID" tf:"domain_id"`
	// +optional
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on"`
	// DNS record name
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Priority Value
	// +optional
	Priority *int64 `json:"priority,omitempty" tf:"priority"`
	// +optional
	Proxiable *bool `json:"proxiable,omitempty" tf:"proxiable"`
	// Boolean value true if proxied else flase
	// +optional
	Proxied *bool `json:"proxied,omitempty" tf:"proxied"`
	// +optional
	RecordID *string `json:"recordID,omitempty" tf:"record_id"`
	// TTL value
	// +optional
	Ttl *int64 `json:"ttl,omitempty" tf:"ttl"`
	// Record type
	Type *string `json:"type" tf:"type"`
	// zone name
	// +optional
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name"`
}

type DnsRecordStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DnsRecordList is a list of DnsRecords
type DnsRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DnsRecord CRD objects
	Items []DnsRecord `json:"items,omitempty"`
}
