/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DomainSettings struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainSettingsSpec   `json:"spec,omitempty"`
	Status            DomainSettingsStatus `json:"status,omitempty"`
}

type DomainSettingsSpecMinify struct {
	// Minify CSS setting
	Css *string `json:"css" tf:"css"`
	// Minify HTML setting
	Html *string `json:"html" tf:"html"`
	// Minify JS setting
	Js *string `json:"js" tf:"js"`
}

type DomainSettingsSpecMobileRedirect struct {
	// Mobile redirect subdomain
	// +optional
	MobileSubdomain *string `json:"mobileSubdomain,omitempty" tf:"mobile_subdomain"`
	// mobile redirect status
	Status *string `json:"status" tf:"status"`
	// mobile redirect strip URI
	// +optional
	StripURI *bool `json:"stripURI,omitempty" tf:"strip_uri"`
}

type DomainSettingsSpecSecurityHeader struct {
	// security header enabled/disabled
	Enabled *bool `json:"enabled" tf:"enabled"`
	// security header subdomain included or not
	IncludeSubdomains *bool `json:"includeSubdomains" tf:"include_subdomains"`
	// security header max age
	MaxAge *int64 `json:"maxAge" tf:"max_age"`
	// security header no sniff
	Nosniff *bool `json:"nosniff" tf:"nosniff"`
}

type DomainSettingsSpec struct {
	State *DomainSettingsSpecResource `json:"state,omitempty" tf:"-"`

	Resource DomainSettingsSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type DomainSettingsSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// always_use_https setting
	// +optional
	AlwaysUseHTTPS *string `json:"alwaysUseHTTPS,omitempty" tf:"always_use_https"`
	// automatic_https_rewrites setting
	// +optional
	AutomaticHTTPSRewrites *string `json:"automaticHTTPSRewrites,omitempty" tf:"automatic_https_rewrites"`
	// brotli setting
	// +optional
	Brotli *string `json:"brotli,omitempty" tf:"brotli"`
	// browser_check setting
	// +optional
	BrowserCheck *string `json:"browserCheck,omitempty" tf:"browser_check"`
	// Certificate status
	// +optional
	// Deprecated
	CertificateStatus *string `json:"certificateStatus,omitempty" tf:"certificate_status"`
	// Challenge TTL setting
	// +optional
	ChallengeTtl *int64 `json:"challengeTtl,omitempty" tf:"challenge_ttl"`
	// Cipher settings
	// +optional
	Cipher []string `json:"cipher,omitempty" tf:"cipher"`
	// CIS instance crn
	CisID *string `json:"cisID" tf:"cis_id"`
	// cname_flattening setting
	// +optional
	CnameFlattening *string `json:"cnameFlattening,omitempty" tf:"cname_flattening"`
	// DNS Sec setting
	// +optional
	Dnssec *string `json:"dnssec,omitempty" tf:"dnssec"`
	// Associated CIS domain
	DomainID *string `json:"domainID" tf:"domain_id"`
	// hotlink_protection setting
	// +optional
	HotlinkProtection *string `json:"hotlinkProtection,omitempty" tf:"hotlink_protection"`
	// http2 setting
	// +optional
	Http2 *string `json:"http2,omitempty" tf:"http2"`
	// image_load_optimization setting
	// +optional
	ImageLoadOptimization *string `json:"imageLoadOptimization,omitempty" tf:"image_load_optimization"`
	// image_size_optimization setting
	// +optional
	ImageSizeOptimization *string `json:"imageSizeOptimization,omitempty" tf:"image_size_optimization"`
	// ip_geolocation setting
	// +optional
	IpGeolocation *string `json:"ipGeolocation,omitempty" tf:"ip_geolocation"`
	// ipv6 setting
	// +optional
	Ipv6 *string `json:"ipv6,omitempty" tf:"ipv6"`
	// Maximum upload
	// +optional
	MaxUpload *int64 `json:"maxUpload,omitempty" tf:"max_upload"`
	// Minimum version of TLS required
	// +optional
	MinTlsVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version"`
	// Minify setting
	// +optional
	Minify *DomainSettingsSpecMinify `json:"minify,omitempty" tf:"minify"`
	// +optional
	MobileRedirect *DomainSettingsSpecMobileRedirect `json:"mobileRedirect,omitempty" tf:"mobile_redirect"`
	// opportunistic_encryption setting
	// +optional
	OpportunisticEncryption *string `json:"opportunisticEncryption,omitempty" tf:"opportunistic_encryption"`
	// origin_error_page_pass_thru setting
	// +optional
	OriginErrorPagePassThru *string `json:"originErrorPagePassThru,omitempty" tf:"origin_error_page_pass_thru"`
	// prefetch_preload setting
	// +optional
	PrefetchPreload *string `json:"prefetchPreload,omitempty" tf:"prefetch_preload"`
	// pseudo_ipv4 setting
	// +optional
	PseudoIpv4 *string `json:"pseudoIpv4,omitempty" tf:"pseudo_ipv4"`
	// response_buffering setting
	// +optional
	ResponseBuffering *string `json:"responseBuffering,omitempty" tf:"response_buffering"`
	// script_load_optimization setting
	// +optional
	ScriptLoadOptimization *string `json:"scriptLoadOptimization,omitempty" tf:"script_load_optimization"`
	// Security Header Setting
	// +optional
	SecurityHeader *DomainSettingsSpecSecurityHeader `json:"securityHeader,omitempty" tf:"security_header"`
	// server_side_exclude setting
	// +optional
	ServerSideExclude *string `json:"serverSideExclude,omitempty" tf:"server_side_exclude"`
	// SSL/TLS setting
	// +optional
	Ssl *string `json:"ssl,omitempty" tf:"ssl"`
	// tls_client_auth setting
	// +optional
	TlsClientAuth *string `json:"tlsClientAuth,omitempty" tf:"tls_client_auth"`
	// true_client_ip_header setting
	// +optional
	TrueClientIPHeader *string `json:"trueClientIPHeader,omitempty" tf:"true_client_ip_header"`
	// WAF setting
	// +optional
	Waf *string `json:"waf,omitempty" tf:"waf"`
	// websockets setting
	// +optional
	Websockets *string `json:"websockets,omitempty" tf:"websockets"`
}

type DomainSettingsStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DomainSettingsList is a list of DomainSettingss
type DomainSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DomainSettings CRD objects
	Items []DomainSettings `json:"items,omitempty"`
}
