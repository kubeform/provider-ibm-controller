/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type WafPackage struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WafPackageSpec   `json:"spec,omitempty"`
	Status            WafPackageStatus `json:"status,omitempty"`
}

type WafPackageSpec struct {
	State *WafPackageSpecResource `json:"state,omitempty" tf:"-"`

	Resource WafPackageSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type WafPackageSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// WAF pakcage action mode
	ActionMode *string `json:"actionMode" tf:"action_mode"`
	// CIS Intance CRN
	CisID *string `json:"cisID" tf:"cis_id"`
	// WAF package description
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// WAF pakcage detection mode
	// +optional
	DetectionMode *string `json:"detectionMode,omitempty" tf:"detection_mode"`
	// CIS Domain ID
	DomainID *string `json:"domainID" tf:"domain_id"`
	// WAF pakcage name
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// WAF pakcage ID
	PackageID *string `json:"packageID" tf:"package_id"`
	// WAF pakcage sensitivity
	Sensitivity *string `json:"sensitivity" tf:"sensitivity"`
}

type WafPackageStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// WafPackageList is a list of WafPackages
type WafPackageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of WafPackage CRD objects
	Items []WafPackage `json:"items,omitempty"`
}
