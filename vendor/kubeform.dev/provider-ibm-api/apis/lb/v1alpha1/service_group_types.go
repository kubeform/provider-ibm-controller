/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ServiceGroup struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceGroupSpec   `json:"spec,omitempty"`
	Status            ServiceGroupStatus `json:"status,omitempty"`
}

type ServiceGroupSpec struct {
	State *ServiceGroupSpecResource `json:"state,omitempty" tf:"-"`

	Resource ServiceGroupSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ServiceGroupSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Allocation type
	Allocation *int64 `json:"allocation" tf:"allocation"`
	// Loadbalancer ID
	LoadBalancerID *int64 `json:"loadBalancerID" tf:"load_balancer_id"`
	// Port number
	Port *int64 `json:"port" tf:"port"`
	// Routing method
	RoutingMethod *string `json:"routingMethod" tf:"routing_method"`
	// Routing type
	RoutingType *string `json:"routingType" tf:"routing_type"`
	// Service group ID
	// +optional
	ServiceGroupID *int64 `json:"serviceGroupID,omitempty" tf:"service_group_id"`
	// List of tags
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Timeout value
	// +optional
	Timeout *int64 `json:"timeout,omitempty" tf:"timeout"`
	// Virtual server ID
	// +optional
	VirtualServerID *int64 `json:"virtualServerID,omitempty" tf:"virtual_server_id"`
}

type ServiceGroupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServiceGroupList is a list of ServiceGroups
type ServiceGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ServiceGroup CRD objects
	Items []ServiceGroup `json:"items,omitempty"`
}
