/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type VpxVip struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpxVipSpec   `json:"spec,omitempty"`
	Status            VpxVipStatus `json:"status,omitempty"`
}

type VpxVipSpec struct {
	State *VpxVipSpecResource `json:"state,omitempty" tf:"-"`

	Resource VpxVipSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type VpxVipSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Load balancing method
	LoadBalancingMethod *string `json:"loadBalancingMethod" tf:"load_balancing_method"`
	// NAD controller ID
	NadControllerID *int64 `json:"nadControllerID" tf:"nad_controller_id"`
	// Name
	Name *string `json:"name" tf:"name"`
	// Persistance value
	// +optional
	Persistence *string `json:"persistence,omitempty" tf:"persistence"`
	// security certificate ID
	// +optional
	SecurityCertificateID *int64 `json:"securityCertificateID,omitempty" tf:"security_certificate_id"`
	// Source Port number
	SourcePort *int64 `json:"sourcePort" tf:"source_port"`
	// List of tags
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Type
	Type *string `json:"type" tf:"type"`
	// Virtual IP address
	VirtualIPAddress *string `json:"virtualIPAddress" tf:"virtual_ip_address"`
}

type VpxVipStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VpxVipList is a list of VpxVips
type VpxVipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of VpxVip CRD objects
	Items []VpxVip `json:"items,omitempty"`
}
