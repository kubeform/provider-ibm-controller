/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Key struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeySpec   `json:"spec,omitempty"`
	Status            KeyStatus `json:"status,omitempty"`
}

type KeySpec struct {
	State *KeySpecResource `json:"state,omitempty" tf:"-"`

	Resource KeySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
}

type KeySpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// An alpha-numeric value identifying the account ID.
	// +optional
	AccountID *string `json:"accountID,omitempty" tf:"account_id"`
	// The date when the key was created.
	// +optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`
	// The subject who created the key.
	// +optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by"`
	// Credentials asociated with the key
	// +optional
	Credentials map[string]string `json:"-" sensitive:"true" tf:"credentials"`
	// crn of resource key
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// The date when the key was deleted.
	// +optional
	DeletedAt *string `json:"deletedAt,omitempty" tf:"deleted_at"`
	// The subject who deleted the key.
	// +optional
	DeletedBy *string `json:"deletedBy,omitempty" tf:"deleted_by"`
	// When you create a new key, a globally unique identifier (GUID) is assigned.
	// +optional
	Guid *string `json:"guid,omitempty" tf:"guid"`
	// Specifies whether the keyâ€™s credentials support IAM.
	// +optional
	IamCompatible *bool `json:"iamCompatible,omitempty" tf:"iam_compatible"`
	// The name of the resource key
	Name *string `json:"name" tf:"name"`
	// Arbitrary parameters to pass. Must be a JSON object
	// +optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`
	// The id of the resource alias for which to create resource key
	// +optional
	ResourceAliasID *string `json:"resourceAliasID,omitempty" tf:"resource_alias_id"`
	// The short ID of the resource group.
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
	// The id of the resource instance for which to create resource key
	// +optional
	ResourceInstanceID *string `json:"resourceInstanceID,omitempty" tf:"resource_instance_id"`
	// The relative path to the resource.
	// +optional
	ResourceInstanceURL *string `json:"resourceInstanceURL,omitempty" tf:"resource_instance_url"`
	// Name of the user role.Valid roles are Writer, Reader, Manager, Administrator, Operator, Viewer, Editor and Custom Roles.
	Role *string `json:"role" tf:"role"`
	// The CRN of resource instance or alias associated to the key.
	// +optional
	SourceCrn *string `json:"sourceCrn,omitempty" tf:"source_crn"`
	// The state of the key.
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// Status of resource key
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// The date when the key was last updated.
	// +optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at"`
	// The subject who updated the key.
	// +optional
	UpdatedBy *string `json:"updatedBy,omitempty" tf:"updated_by"`
	// When you created a new key, a relative URL path is created identifying the location of the key.
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type KeyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// KeyList is a list of Keys
type KeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Key CRD objects
	Items []Key `json:"items,omitempty"`
}
