/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Instance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec,omitempty"`
	Status            InstanceStatus `json:"status,omitempty"`
}

type InstanceSpecServiceKeys struct {
	// The service key credential details like port, username etc
	// +optional
	Credentials map[string]string `json:"-" sensitive:"true" tf:"credentials"`
	// The service key name
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type InstanceSpec struct {
	State *InstanceSpecResource `json:"state,omitempty" tf:"-"`

	Resource InstanceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
}

type InstanceSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The service broker-provided credentials to use this service.
	// +optional
	Credentials map[string]string `json:"-" sensitive:"true" tf:"credentials"`
	// Dashboard URL to access resource.
	// +optional
	DashboardURL *string `json:"dashboardURL,omitempty" tf:"dashboard_url"`
	// A name for the service instance
	Name *string `json:"name" tf:"name"`
	// Arbitrary parameters to pass along to the service broker. Must be a JSON object
	// +optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`
	// The plan type of the service
	Plan *string `json:"plan" tf:"plan"`
	// The name of the service offering like speech_to_text, text_to_speech etc
	Service *string `json:"service" tf:"service"`
	// The service keys asociated with the service instance
	// +optional
	ServiceKeys []InstanceSpecServiceKeys `json:"serviceKeys,omitempty" tf:"service_keys"`
	// The uniquie identifier of the service offering plan type
	// +optional
	ServicePlanGuid *string `json:"servicePlanGuid,omitempty" tf:"service_plan_guid"`
	// The guid of the space in which the instance will be created
	SpaceGuid *string `json:"spaceGuid" tf:"space_guid"`
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Define timeout to wait for the service instances to succeeded/deleted etc.
	// +optional
	WaitTimeMinutes *int64 `json:"waitTimeMinutes,omitempty" tf:"wait_time_minutes"`
}

type InstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// InstanceList is a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Instance CRD objects
	Items []Instance `json:"items,omitempty"`
}
