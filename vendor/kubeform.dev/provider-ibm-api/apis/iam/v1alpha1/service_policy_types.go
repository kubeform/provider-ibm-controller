/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ServicePolicy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServicePolicySpec   `json:"spec,omitempty"`
	Status            ServicePolicyStatus `json:"status,omitempty"`
}

type ServicePolicySpecResourceAttributes struct {
	// Name of attribute.
	Name *string `json:"name" tf:"name"`
	// Operator of attribute.
	// +optional
	Operator *string `json:"operator,omitempty" tf:"operator"`
	// Value of attribute.
	Value *string `json:"value" tf:"value"`
}

type ServicePolicySpecResources struct {
	// Set resource attributes in the form of 'name=value,name=value....
	// +optional
	Attributes map[string]string `json:"attributes,omitempty" tf:"attributes"`
	// Region of the policy definition
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// Resource of the policy definition
	// +optional
	Resource *string `json:"resource,omitempty" tf:"resource"`
	// ID of the resource group.
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
	// ID of resource instance of the policy definition
	// +optional
	ResourceInstanceID *string `json:"resourceInstanceID,omitempty" tf:"resource_instance_id"`
	// Resource type of the policy definition
	// +optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type"`
	// Service name of the policy definition
	// +optional
	Service *string `json:"service,omitempty" tf:"service"`
}

type ServicePolicySpec struct {
	State *ServicePolicySpecResource `json:"state,omitempty" tf:"-"`

	Resource ServicePolicySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ServicePolicySpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Give access to all account management services
	// +optional
	AccountManagement *bool `json:"accountManagement,omitempty" tf:"account_management"`
	// IAM ID of ServiceID
	// +optional
	IamID *string `json:"iamID,omitempty" tf:"iam_id"`
	// UUID of ServiceID
	// +optional
	IamServiceID *string `json:"iamServiceID,omitempty" tf:"iam_service_id"`
	// Set resource attributes.
	// +optional
	ResourceAttributes []ServicePolicySpecResourceAttributes `json:"resourceAttributes,omitempty" tf:"resource_attributes"`
	// +optional
	Resources *ServicePolicySpecResources `json:"resources,omitempty" tf:"resources"`
	// Role names of the policy definition
	Roles []string `json:"roles" tf:"roles"`
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
}

type ServicePolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServicePolicyList is a list of ServicePolicys
type ServicePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ServicePolicy CRD objects
	Items []ServicePolicy `json:"items,omitempty"`
}
