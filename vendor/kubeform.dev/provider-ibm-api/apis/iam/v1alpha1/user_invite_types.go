/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type UserInvite struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserInviteSpec   `json:"spec,omitempty"`
	Status            UserInviteStatus `json:"status,omitempty"`
}

type UserInviteSpecClassicInfraRoles struct {
	// permission set for claasic infrastructure
	// +optional
	PermissionSet *string `json:"permissionSet,omitempty" tf:"permission_set"`
	// List of permissions for claasic infrastructure
	// +optional
	Permissions []string `json:"permissions,omitempty" tf:"permissions"`
}

type UserInviteSpecCloudFoundryRolesSpaces struct {
	// GUID of space
	SpaceGuid *string `json:"spaceGuid" tf:"space_guid"`
	// roles to be assigned to user in given space
	SpaceRoles []string `json:"spaceRoles" tf:"space_roles"`
}

type UserInviteSpecCloudFoundryRoles struct {
	// roles to be assigned to user in given space
	OrgRoles []string `json:"orgRoles" tf:"org_roles"`
	// GUID of Organization
	OrganizationGuid *string `json:"organizationGuid" tf:"organization_guid"`
	// +optional
	Spaces []UserInviteSpecCloudFoundryRolesSpaces `json:"spaces,omitempty" tf:"spaces"`
}

type UserInviteSpecIamPolicyResources struct {
	// Set resource attributes in the form of 'name=value,name=value....
	// +optional
	Attributes map[string]string `json:"attributes,omitempty" tf:"attributes"`
	// Region of the policy definition
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// Resource of the policy definition
	// +optional
	Resource *string `json:"resource,omitempty" tf:"resource"`
	// ID of the resource group.
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
	// ID of resource instance of the policy definition
	// +optional
	ResourceInstanceID *string `json:"resourceInstanceID,omitempty" tf:"resource_instance_id"`
	// Resource type of the policy definition
	// +optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type"`
	// Service name of the policy definition
	// +optional
	Service *string `json:"service,omitempty" tf:"service"`
}

type UserInviteSpecIamPolicy struct {
	// Give access to all account management services
	// +optional
	AccountManagement *bool `json:"accountManagement,omitempty" tf:"account_management"`
	// +optional
	Resources []UserInviteSpecIamPolicyResources `json:"resources,omitempty" tf:"resources"`
	// Role names of the policy definition
	Roles []string `json:"roles" tf:"roles"`
}

type UserInviteSpecInvitedUsersAccessGroupsPoliciesResources struct {
	// Set resource attributes in the form of 'name=value,name=value....
	// +optional
	Attributes map[string]string `json:"attributes,omitempty" tf:"attributes"`
	// Region of the policy definition
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// Resource of the policy definition
	// +optional
	Resource *string `json:"resource,omitempty" tf:"resource"`
	// ID of the resource group.
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
	// ID of resource instance of the policy definition
	// +optional
	ResourceInstanceID *string `json:"resourceInstanceID,omitempty" tf:"resource_instance_id"`
	// Resource type of the policy definition
	// +optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type"`
	// Service name of the policy definition
	// +optional
	Service *string `json:"service,omitempty" tf:"service"`
}

type UserInviteSpecInvitedUsersAccessGroupsPolicies struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Resources []UserInviteSpecInvitedUsersAccessGroupsPoliciesResources `json:"resources,omitempty" tf:"resources"`
	// Role names of the policy definition
	// +optional
	Roles []string `json:"roles,omitempty" tf:"roles"`
}

type UserInviteSpecInvitedUsersAccessGroups struct {
	// Name of the access group
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Policies []UserInviteSpecInvitedUsersAccessGroupsPolicies `json:"policies,omitempty" tf:"policies"`
}

type UserInviteSpecInvitedUsersUserPoliciesResources struct {
	// Set resource attributes in the form of 'name=value,name=value....
	// +optional
	Attributes map[string]string `json:"attributes,omitempty" tf:"attributes"`
	// Region of the policy definition
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// Resource of the policy definition
	// +optional
	Resource *string `json:"resource,omitempty" tf:"resource"`
	// ID of the resource group.
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
	// ID of resource instance of the policy definition
	// +optional
	ResourceInstanceID *string `json:"resourceInstanceID,omitempty" tf:"resource_instance_id"`
	// Resource type of the policy definition
	// +optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type"`
	// Service name of the policy definition
	// +optional
	Service *string `json:"service,omitempty" tf:"service"`
}

type UserInviteSpecInvitedUsersUserPolicies struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Resources []UserInviteSpecInvitedUsersUserPoliciesResources `json:"resources,omitempty" tf:"resources"`
	// Role names of the policy definition
	// +optional
	Roles []string `json:"roles,omitempty" tf:"roles"`
}

type UserInviteSpecInvitedUsers struct {
	// access group ids to associate the inviting user
	// +optional
	AccessGroups []UserInviteSpecInvitedUsersAccessGroups `json:"accessGroups,omitempty" tf:"access_groups"`
	// ibm id or email of user
	// +optional
	UserID *string `json:"userID,omitempty" tf:"user_id"`
	// +optional
	UserPolicies []UserInviteSpecInvitedUsersUserPolicies `json:"userPolicies,omitempty" tf:"user_policies"`
}

type UserInviteSpec struct {
	State *UserInviteSpecResource `json:"state,omitempty" tf:"-"`

	Resource UserInviteSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type UserInviteSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// access group ids to associate the inviting user
	// +optional
	AccessGroups []string `json:"accessGroups,omitempty" tf:"access_groups"`
	// +optional
	ClassicInfraRoles []UserInviteSpecClassicInfraRoles `json:"classicInfraRoles,omitempty" tf:"classic_infra_roles"`
	// +optional
	CloudFoundryRoles []UserInviteSpecCloudFoundryRoles `json:"cloudFoundryRoles,omitempty" tf:"cloud_foundry_roles"`
	// +optional
	IamPolicy []UserInviteSpecIamPolicy `json:"iamPolicy,omitempty" tf:"iam_policy"`
	// +optional
	InvitedUsers []UserInviteSpecInvitedUsers `json:"invitedUsers,omitempty" tf:"invited_users"`
	// Number of users invited to an account
	// +optional
	NumberOfInvitedUsers *int64 `json:"numberOfInvitedUsers,omitempty" tf:"number_of_invited_users"`
	// List of ibm id or email of user
	Users []string `json:"users" tf:"users"`
}

type UserInviteStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// UserInviteList is a list of UserInvites
type UserInviteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of UserInvite CRD objects
	Items []UserInvite `json:"items,omitempty"`
}
