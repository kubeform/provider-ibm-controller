/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Connection struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectionSpec   `json:"spec,omitempty"`
	Status            ConnectionStatus `json:"status,omitempty"`
}

type ConnectionSpec struct {
	State *ConnectionSpecResource `json:"state,omitempty" tf:"-"`

	Resource ConnectionSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ConnectionSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of a network_type 'classic' connection a tunnel is configured over. This field only applies to network type 'gre_tunnel' connections.
	// +optional
	BaseConnectionID *string `json:"baseConnectionID,omitempty" tf:"base_connection_id"`
	// The Transit Gateway Connection identifier
	// +optional
	ConnectionID *string `json:"connectionID,omitempty" tf:"connection_id"`
	// The date and time that this connection was created
	// +optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`
	// The Transit Gateway identifier
	Gateway *string `json:"gateway" tf:"gateway"`
	// The local gateway IP address. This field only applies to network type 'gre_tunnel' connections.
	// +optional
	LocalGatewayIP *string `json:"localGatewayIP,omitempty" tf:"local_gateway_ip"`
	// The local tunnel IP address. This field only applies to network type 'gre_tunnel' connections.
	// +optional
	LocalTunnelIP *string `json:"localTunnelIP,omitempty" tf:"local_tunnel_ip"`
	// The user-defined name for this transit gateway. If unspecified, the name will be the network name (the name of the VPC in the case of network type 'vpc', and the word Classic, in the case of network type 'classic').
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The ID of the account which owns the network that is being connected. Generally only used if the network is in a different account than the gateway.
	// +optional
	NetworkAccountID *string `json:"networkAccountID,omitempty" tf:"network_account_id"`
	// The ID of the network being connected via this connection. This field is required for some types, such as 'vpc'. For network type 'vpc' this is the CRN of the VPC to be connected. This field is required to be unspecified for network type 'classic'.
	// +optional
	NetworkID *string `json:"networkID,omitempty" tf:"network_id"`
	// Defines what type of network is connected via this connection.Allowable values (classic,vpc,gre_tunnel)
	NetworkType *string `json:"networkType" tf:"network_type"`
	// The crn of the transit gateway
	// +optional
	RelatedCrn *string `json:"relatedCrn,omitempty" tf:"related_crn"`
	// The remote network BGP ASN. This field only applies to network type 'gre_tunnel' connections.
	// +optional
	RemoteBGPAsn *int64 `json:"remoteBGPAsn,omitempty" tf:"remote_bgp_asn"`
	// The remote gateway IP address. This field only applies to network type 'gre_tunnel' connections.
	// +optional
	RemoteGatewayIP *string `json:"remoteGatewayIP,omitempty" tf:"remote_gateway_ip"`
	// The remote tunnel IP address. This field only applies to network type 'gre_tunnel' connections.
	// +optional
	RemoteTunnelIP *string `json:"remoteTunnelIP,omitempty" tf:"remote_tunnel_ip"`
	// Only visible for cross account connections, this field represents the status of the request to connect the given network between accounts.Possible values: [pending,approved,rejected,expired,detached]
	// +optional
	RequestStatus *string `json:"requestStatus,omitempty" tf:"request_status"`
	// What is the current configuration state of this connection. Possible values: [attached,failed,pending,deleting,detaching,detached]
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// The date and time that this connection was last updated
	// +optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at"`
	// Location of GRE tunnel. This field only applies to network type 'gre_tunnel' connections.
	// +optional
	Zone *string `json:"zone,omitempty" tf:"zone"`
}

type ConnectionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ConnectionList is a list of Connections
type ConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Connection CRD objects
	Items []Connection `json:"items,omitempty"`
}
