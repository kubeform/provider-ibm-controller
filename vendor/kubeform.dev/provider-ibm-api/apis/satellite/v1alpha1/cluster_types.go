/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Cluster struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec,omitempty"`
	Status            ClusterStatus `json:"status,omitempty"`
}

type ClusterSpecZones struct {
	// Zone for the worker pool in a multizone cluster
	ID *string `json:"ID" tf:"id"`
}

type ClusterSpec struct {
	State *ClusterSpecResource `json:"state,omitempty" tf:"-"`

	Resource ClusterSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ClusterSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// CRN of resource instance
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// Labels on the default worker pool
	// +optional
	DefaultWorkerPoolLabels *map[string]string `json:"defaultWorkerPoolLabels,omitempty" tf:"default_worker_pool_labels"`
	// Boolean value true if Public service endpoint to be disabled
	// +optional
	DisablePublicServiceEndpoint *bool `json:"disablePublicServiceEndpoint,omitempty" tf:"disable_public_service_endpoint"`
	// Grant cluster admin access to Satellite Config to manage Kubernetes resources.
	// +optional
	EnableConfigAdmin *bool `json:"enableConfigAdmin,omitempty" tf:"enable_config_admin"`
	// Labels that describe a Satellite host for default workerpool
	// +optional
	HostLabels []string `json:"hostLabels,omitempty" tf:"host_labels"`
	// +optional
	IngressHostname *string `json:"ingressHostname,omitempty" tf:"ingress_hostname"`
	// +optional
	IngressSecret *string `json:"-" sensitive:"true" tf:"ingress_secret"`
	// The OpenShift Container Platform version
	// +optional
	KubeVersion *string `json:"kubeVersion,omitempty" tf:"kube_version"`
	// The name or ID of the Satellite location
	Location *string `json:"location" tf:"location"`
	// +optional
	MasterStatus *string `json:"masterStatus,omitempty" tf:"master_status"`
	// +optional
	MasterURL *string `json:"masterURL,omitempty" tf:"master_url"`
	// The unique name for the new IBM Cloud Satellite cluster
	Name *string `json:"name" tf:"name"`
	// Kubernetes patch version
	// +optional
	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version"`
	// User provided value for the pod subnet
	// +optional
	PodSubnet *string `json:"podSubnet,omitempty" tf:"pod_subnet"`
	// +optional
	PrivateServiceEndpointEnabled *bool `json:"privateServiceEndpointEnabled,omitempty" tf:"private_service_endpoint_enabled"`
	// +optional
	PrivateServiceEndpointURL *string `json:"privateServiceEndpointURL,omitempty" tf:"private_service_endpoint_url"`
	// +optional
	PublicServiceEndpointEnabled *bool `json:"publicServiceEndpointEnabled,omitempty" tf:"public_service_endpoint_enabled"`
	// +optional
	PublicServiceEndpointURL *string `json:"publicServiceEndpointURL,omitempty" tf:"public_service_endpoint_url"`
	// The RedHat pull secret to create the OpenShift cluster
	// +optional
	PullSecret *string `json:"pullSecret,omitempty" tf:"pull_secret"`
	// ID of the resource group.
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
	// The resource group name in which resource is provisioned
	// +optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name"`
	// Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates if the previous apply fails
	// +optional
	RetryPatchVersion *int64 `json:"retryPatchVersion,omitempty" tf:"retry_patch_version"`
	// User provided value for service subnet
	// +optional
	ServiceSubnet *string `json:"serviceSubnet,omitempty" tf:"service_subnet"`
	// The lifecycle state of the cluster.
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// List of tags for the resources
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Wait for worker node to update during kube version update.
	// +optional
	WaitForWorkerUpdate *bool `json:"waitForWorkerUpdate,omitempty" tf:"wait_for_worker_update"`
	// The number of worker nodes per zone in the default worker pool. Required when '--host-label' is specified. (default: 0)
	// +optional
	WorkerCount *int64 `json:"workerCount,omitempty" tf:"worker_count"`
	// Zone info for worker pool
	// +optional
	Zones []ClusterSpecZones `json:"zones,omitempty" tf:"zones"`
}

type ClusterStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ClusterList is a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Cluster CRD objects
	Items []Cluster `json:"items,omitempty"`
}
