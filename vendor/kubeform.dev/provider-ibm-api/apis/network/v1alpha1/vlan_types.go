/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Vlan struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VlanSpec   `json:"spec,omitempty"`
	Status            VlanStatus `json:"status,omitempty"`
}

type VlanSpecSubnets struct {
	// +optional
	Cidr *int64 `json:"cidr,omitempty" tf:"cidr"`
	// +optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway"`
	// +optional
	Subnet *string `json:"subnet,omitempty" tf:"subnet"`
	// +optional
	SubnetSize *int64 `json:"subnetSize,omitempty" tf:"subnet_size"`
	// +optional
	SubnetType *string `json:"subnetType,omitempty" tf:"subnet_type"`
}

type VlanSpec struct {
	State *VlanSpecResource `json:"state,omitempty" tf:"-"`

	Resource VlanSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type VlanSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Child resource count
	// +optional
	ChildResourceCount *int64 `json:"childResourceCount,omitempty" tf:"child_resource_count"`
	// Datacenter name
	Datacenter *string `json:"datacenter" tf:"datacenter"`
	// VLAN name
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
	// +optional
	ResourceControllerURL *string `json:"resourceControllerURL,omitempty" tf:"resource_controller_url"`
	// The name of the resource
	// +optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name"`
	// router host name
	// +optional
	RouterHostname *string `json:"routerHostname,omitempty" tf:"router_hostname"`
	// Zzset to true if VLAN is managed by softlayer
	// +optional
	SoftlayerManaged *bool `json:"softlayerManaged,omitempty" tf:"softlayer_managed"`
	// +optional
	Subnets []VlanSpecSubnets `json:"subnets,omitempty" tf:"subnets"`
	// List of tags
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// VLAN type
	Type *string `json:"type" tf:"type"`
	// VLAN number
	// +optional
	VlanNumber *int64 `json:"vlanNumber,omitempty" tf:"vlan_number"`
}

type VlanStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VlanList is a list of Vlans
type VlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Vlan CRD objects
	Items []Vlan `json:"items,omitempty"`
}
