/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Gateway struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewaySpec   `json:"spec,omitempty"`
	Status            GatewayStatus `json:"status,omitempty"`
}

type GatewaySpecAssociatedVlans struct {
	// Indicates if the VLAN is in bypass or routed modes
	// +optional
	Bypass *bool `json:"bypass,omitempty" tf:"bypass"`
	// The Identifier of the VLAN which is associated
	// +optional
	NetworkVLANID *int64 `json:"networkVLANID,omitempty" tf:"network_vlan_id"`
	// +optional
	VlanID *int64 `json:"vlanID,omitempty" tf:"vlan_id"`
}

type GatewaySpecMembersStorageGroups struct {
	// +optional
	ArraySize   *int64  `json:"arraySize,omitempty" tf:"array_size"`
	ArrayTypeID *int64  `json:"arrayTypeID" tf:"array_type_id"`
	HardDrives  []int64 `json:"hardDrives" tf:"hard_drives"`
	// +optional
	PartitionTemplateID *int64 `json:"partitionTemplateID,omitempty" tf:"partition_template_id"`
}

type GatewaySpecMembers struct {
	Datacenter *string `json:"datacenter" tf:"datacenter"`
	// +optional
	DiskKeyNames []string `json:"diskKeyNames,omitempty" tf:"disk_key_names"`
	Domain       *string  `json:"domain" tf:"domain"`
	// +optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname"`
	// +optional
	Ipv6Address *string `json:"ipv6Address,omitempty" tf:"ipv6_address"`
	// +optional
	Ipv6Enabled *bool `json:"ipv6Enabled,omitempty" tf:"ipv6_enabled"`
	// +optional
	MemberID *int64 `json:"memberID,omitempty" tf:"member_id"`
	Memory   *int64 `json:"memory" tf:"memory"`
	// +optional
	NetworkSpeed *int64 `json:"networkSpeed,omitempty" tf:"network_speed"`
	// +optional
	Notes *string `json:"notes,omitempty" tf:"notes"`
	// +optional
	OsKeyName *string `json:"osKeyName,omitempty" tf:"os_key_name"`
	// +optional
	PackageKeyName *string `json:"packageKeyName,omitempty" tf:"package_key_name"`
	// +optional
	PostInstallScriptURI *string `json:"postInstallScriptURI,omitempty" tf:"post_install_script_uri"`
	// +optional
	PrivateIpv4Address *string `json:"privateIpv4Address,omitempty" tf:"private_ipv4_address"`
	// +optional
	PrivateNetworkOnly *bool `json:"privateNetworkOnly,omitempty" tf:"private_network_only"`
	// +optional
	PrivateVLANID *int64 `json:"privateVLANID,omitempty" tf:"private_vlan_id"`
	// +optional
	ProcessKeyName *string `json:"processKeyName,omitempty" tf:"process_key_name"`
	// +optional
	PublicBandwidth *int64 `json:"publicBandwidth,omitempty" tf:"public_bandwidth"`
	// +optional
	PublicIpv4Address *string `json:"publicIpv4Address,omitempty" tf:"public_ipv4_address"`
	// +optional
	PublicVLANID *int64 `json:"publicVLANID,omitempty" tf:"public_vlan_id"`
	// +optional
	RedundantNetwork *bool `json:"redundantNetwork,omitempty" tf:"redundant_network"`
	// +optional
	RedundantPowerSupply *bool `json:"redundantPowerSupply,omitempty" tf:"redundant_power_supply"`
	// +optional
	SshKeyIDS []int64 `json:"sshKeyIDS,omitempty" tf:"ssh_key_ids"`
	// +optional
	StorageGroups []GatewaySpecMembersStorageGroups `json:"storageGroups,omitempty" tf:"storage_groups"`
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TcpMonitoring *bool `json:"tcpMonitoring,omitempty" tf:"tcp_monitoring"`
	// +optional
	UnbondedNetwork *bool `json:"unbondedNetwork,omitempty" tf:"unbonded_network"`
	// +optional
	UserMetadata *string `json:"userMetadata,omitempty" tf:"user_metadata"`
}

type GatewaySpec struct {
	State *GatewaySpecResource `json:"state,omitempty" tf:"-"`

	Resource GatewaySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type GatewaySpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The VLAN instances associated with this Network Gateway
	// +optional
	AssociatedVlans []GatewaySpecAssociatedVlans `json:"associatedVlans,omitempty" tf:"associated_vlans"`
	// The hardware members of this network Gateway
	// +kubebuilder:validation:MaxItems=2
	// +kubebuilder:validation:MinItems=1
	Members []GatewaySpecMembers `json:"members" tf:"members"`
	// The name of the gateway
	Name *string `json:"name" tf:"name"`
	// +optional
	PostInstallScriptURI *string `json:"postInstallScriptURI,omitempty" tf:"post_install_script_uri"`
	// +optional
	PrivateIPAddressID *int64 `json:"privateIPAddressID,omitempty" tf:"private_ip_address_id"`
	// +optional
	PrivateIpv4Address *string `json:"privateIpv4Address,omitempty" tf:"private_ipv4_address"`
	// +optional
	PrivateVLANID *int64 `json:"privateVLANID,omitempty" tf:"private_vlan_id"`
	// +optional
	PublicIPAddressID *int64 `json:"publicIPAddressID,omitempty" tf:"public_ip_address_id"`
	// +optional
	PublicIpv4Address *string `json:"publicIpv4Address,omitempty" tf:"public_ipv4_address"`
	// +optional
	PublicIpv6AddressID *int64 `json:"publicIpv6AddressID,omitempty" tf:"public_ipv6_address_id"`
	// +optional
	PublicVLANID *int64 `json:"publicVLANID,omitempty" tf:"public_vlan_id"`
	// +optional
	SshKeyIDS []int64 `json:"sshKeyIDS,omitempty" tf:"ssh_key_ids"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type GatewayStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GatewayList is a list of Gateways
type GatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Gateway CRD objects
	Items []Gateway `json:"items,omitempty"`
}
