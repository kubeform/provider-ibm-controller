/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type SslCertificate struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SslCertificateSpec   `json:"spec,omitempty"`
	Status            SslCertificateStatus `json:"status,omitempty"`
}

type SslCertificateSpec struct {
	State *SslCertificateSpecResource `json:"state,omitempty" tf:"-"`

	Resource SslCertificateSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
}

type SslCertificateSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// SSL Certifcate
	Certificate *string `json:"certificate" tf:"certificate"`
	// Common name
	// +optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name"`
	// certificate creation date
	// +optional
	CreateDate *string `json:"createDate,omitempty" tf:"create_date"`
	// Intermediate certificate value
	// +optional
	IntermediateCertificate *string `json:"intermediateCertificate,omitempty" tf:"intermediate_certificate"`
	// SSL key size
	// +optional
	KeySize *int64 `json:"keySize,omitempty" tf:"key_size"`
	// certificate modificatiob date
	// +optional
	ModifyDate *string `json:"modifyDate,omitempty" tf:"modify_date"`
	// Organization name
	// +optional
	OrganizationName *string `json:"organizationName,omitempty" tf:"organization_name"`
	// SSL Private Key
	PrivateKey *string `json:"-" sensitive:"true" tf:"private_key"`
	// Tags set for resource
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Validity begins from
	// +optional
	ValidityBegin *string `json:"validityBegin,omitempty" tf:"validity_begin"`
	// Validity days
	// +optional
	ValidityDays *int64 `json:"validityDays,omitempty" tf:"validity_days"`
	// Validity ends before
	// +optional
	ValidityEnd *string `json:"validityEnd,omitempty" tf:"validity_end"`
}

type SslCertificateStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SslCertificateList is a list of SslCertificates
type SslCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of SslCertificate CRD objects
	Items []SslCertificate `json:"items,omitempty"`
}
