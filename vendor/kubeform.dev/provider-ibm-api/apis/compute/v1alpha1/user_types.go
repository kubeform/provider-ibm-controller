/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type User struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserSpec   `json:"spec,omitempty"`
	Status            UserStatus `json:"status,omitempty"`
}

type UserSpec struct {
	State *UserSpecResource `json:"state,omitempty" tf:"-"`

	Resource UserSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
}

type UserSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Address info of the user
	Address1 *string `json:"address1" tf:"address1"`
	// Address info of the user
	// +optional
	Address2 *string `json:"address2,omitempty" tf:"address2"`
	// API key for the user
	// +optional
	ApiKey *string `json:"-" sensitive:"true" tf:"api_key"`
	// City name
	City *string `json:"city" tf:"city"`
	// comapany name
	CompanyName *string `json:"companyName" tf:"company_name"`
	// Country name
	Country *string `json:"country" tf:"country"`
	// email address of the user
	Email *string `json:"email" tf:"email"`
	// First name of the user
	FirstName *string `json:"firstName" tf:"first_name"`
	// API Key info of the user
	// +optional
	HasAPIKey *bool `json:"hasAPIKey,omitempty" tf:"has_api_key"`
	// IBM ID of the  user
	// +optional
	IbmID *string `json:"ibmID,omitempty" tf:"ibm_id"`
	// Last name of the user
	LastName *string `json:"lastName" tf:"last_name"`
	// password for the user
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// set of persmissions assigned for the user
	// +optional
	Permissions []string `json:"permissions,omitempty" tf:"permissions"`
	// Satate name
	State *string `json:"state" tf:"state"`
	// Tags set for the resources
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// time zone info
	Timezone *string `json:"timezone" tf:"timezone"`
	// user status info
	// +optional
	UserStatus *string `json:"userStatus,omitempty" tf:"user_status"`
	// user name
	// +optional
	Username *string `json:"username,omitempty" tf:"username"`
}

type UserStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// UserList is a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of User CRD objects
	Items []User `json:"items,omitempty"`
}
