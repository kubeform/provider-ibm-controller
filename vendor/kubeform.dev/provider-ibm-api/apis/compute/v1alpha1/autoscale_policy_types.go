/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AutoscalePolicy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutoscalePolicySpec   `json:"spec,omitempty"`
	Status            AutoscalePolicyStatus `json:"status,omitempty"`
}

type AutoscalePolicySpecTriggersWatches struct {
	// +optional
	ID       *int64  `json:"ID,omitempty" tf:"id"`
	Metric   *string `json:"metric" tf:"metric"`
	Operator *string `json:"operator" tf:"operator"`
	Period   *int64  `json:"period" tf:"period"`
	Value    *string `json:"value" tf:"value"`
}

type AutoscalePolicySpecTriggers struct {
	// +optional
	Date *string `json:"date,omitempty" tf:"date"`
	// +optional
	ID *int64 `json:"ID,omitempty" tf:"id"`
	// +optional
	Schedule *string `json:"schedule,omitempty" tf:"schedule"`
	Type     *string `json:"type" tf:"type"`
	// +optional
	Watches []AutoscalePolicySpecTriggersWatches `json:"watches,omitempty" tf:"watches"`
}

type AutoscalePolicySpec struct {
	State *AutoscalePolicySpecResource `json:"state,omitempty" tf:"-"`

	Resource AutoscalePolicySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type AutoscalePolicySpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// cooldown value
	// +optional
	Cooldown *int64 `json:"cooldown,omitempty" tf:"cooldown"`
	// Name
	Name *string `json:"name" tf:"name"`
	// Scale amount
	ScaleAmount *int64 `json:"scaleAmount" tf:"scale_amount"`
	// scale group ID
	ScaleGroupID *int64 `json:"scaleGroupID" tf:"scale_group_id"`
	// scale type
	ScaleType *string `json:"scaleType" tf:"scale_type"`
	// List of tags
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// +optional
	Triggers []AutoscalePolicySpecTriggers `json:"triggers,omitempty" tf:"triggers"`
}

type AutoscalePolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AutoscalePolicyList is a list of AutoscalePolicys
type AutoscalePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AutoscalePolicy CRD objects
	Items []AutoscalePolicy `json:"items,omitempty"`
}
