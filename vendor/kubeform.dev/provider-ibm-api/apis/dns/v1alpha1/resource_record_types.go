/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ResourceRecord struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResourceRecordSpec   `json:"spec,omitempty"`
	Status            ResourceRecordStatus `json:"status,omitempty"`
}

type ResourceRecordSpec struct {
	State *ResourceRecordSpecResource `json:"state,omitempty" tf:"-"`

	Resource ResourceRecordSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ResourceRecordSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Creation Data
	// +optional
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on"`
	// Instance ID
	InstanceID *string `json:"instanceID" tf:"instance_id"`
	// Modification date
	// +optional
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on"`
	// DNS record name
	Name *string `json:"name" tf:"name"`
	// DNS server Port
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// DNS maximum preference
	// +optional
	Preference *int64 `json:"preference,omitempty" tf:"preference"`
	// DNS server Priority
	// +optional
	Priority *int64 `json:"priority,omitempty" tf:"priority"`
	// Protocol
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// DNS record Data
	Rdata *string `json:"rdata" tf:"rdata"`
	// Resource record ID
	// +optional
	ResourceRecordID *string `json:"resourceRecordID,omitempty" tf:"resource_record_id"`
	// Service info
	// +optional
	Service *string `json:"service,omitempty" tf:"service"`
	// DNS record TTL
	// +optional
	Ttl *int64 `json:"ttl,omitempty" tf:"ttl"`
	// DNS record Type
	Type *string `json:"type" tf:"type"`
	// DNS server weight
	// +optional
	Weight *int64 `json:"weight,omitempty" tf:"weight"`
	// Zone ID
	ZoneID *string `json:"zoneID" tf:"zone_id"`
}

type ResourceRecordStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ResourceRecordList is a list of ResourceRecords
type ResourceRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ResourceRecord CRD objects
	Items []ResourceRecord `json:"items,omitempty"`
}
