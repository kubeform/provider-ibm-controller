/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Record struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RecordSpec   `json:"spec,omitempty"`
	Status            RecordStatus `json:"status,omitempty"`
}

type RecordSpec struct {
	State *RecordSpecResource `json:"state,omitempty" tf:"-"`

	Resource RecordSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type RecordSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// DNS record data
	Data *string `json:"data" tf:"data"`
	// Domain ID of dns record instance
	DomainID *int64 `json:"domainID" tf:"domain_id"`
	// DNS record expiry info
	// +optional
	Expire *int64 `json:"expire,omitempty" tf:"expire"`
	// Hostname
	Host *string `json:"host" tf:"host"`
	// Minimun TTL configuration
	// +optional
	MinimumTtl *int64 `json:"minimumTtl,omitempty" tf:"minimum_ttl"`
	// Maximum priority
	// +optional
	MxPriority *int64 `json:"mxPriority,omitempty" tf:"mx_priority"`
	// port number
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// priority info
	// +optional
	Priority *int64 `json:"priority,omitempty" tf:"priority"`
	// protocol info
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// refresh rate
	// +optional
	Refresh *int64 `json:"refresh,omitempty" tf:"refresh"`
	// Responsible person for DNS record
	// +optional
	ResponsiblePerson *string `json:"responsiblePerson,omitempty" tf:"responsible_person"`
	// Retry count
	// +optional
	Retry *int64 `json:"retry,omitempty" tf:"retry"`
	// service info
	// +optional
	Service *string `json:"service,omitempty" tf:"service"`
	// tags set for the resource
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// TTL configuration
	Ttl *int64 `json:"ttl" tf:"ttl"`
	// DNS record type
	Type *string `json:"type" tf:"type"`
	// weight info
	// +optional
	Weight *int64 `json:"weight,omitempty" tf:"weight"`
}

type RecordStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RecordList is a list of Records
type RecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Record CRD objects
	Items []Record `json:"items,omitempty"`
}
