/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type GlbMonitor struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GlbMonitorSpec   `json:"spec,omitempty"`
	Status            GlbMonitorStatus `json:"status,omitempty"`
}

type GlbMonitorSpecHeaders struct {
	// The name of HTTP request header
	Name *string `json:"name" tf:"name"`
	// The value of HTTP request header
	Value []string `json:"value" tf:"value"`
}

type GlbMonitorSpec struct {
	State *GlbMonitorSpecResource `json:"state,omitempty" tf:"-"`

	Resource GlbMonitorSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type GlbMonitorSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTPS monitors.
	// +optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure"`
	// GLB Monitor creation date
	// +optional
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on"`
	// Descriptive text of the load balancer monitor
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// A case-insensitive sub-string to look for in the response body
	// +optional
	ExpectedBody *string `json:"expectedBody,omitempty" tf:"expected_body"`
	// The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS
	// +optional
	ExpectedCodes *string `json:"expectedCodes,omitempty" tf:"expected_codes"`
	// The HTTP request headers to send in the health check
	// +optional
	Headers []GlbMonitorSpecHeaders `json:"headers,omitempty" tf:"headers"`
	// Instance Id
	InstanceID *string `json:"instanceID" tf:"instance_id"`
	// The interval between each health check
	// +optional
	Interval *int64 `json:"interval,omitempty" tf:"interval"`
	// The method to use for the health check
	// +optional
	Method *string `json:"method,omitempty" tf:"method"`
	// GLB Monitor Modification date
	// +optional
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on"`
	// Monitor Id
	// +optional
	MonitorID *string `json:"monitorID,omitempty" tf:"monitor_id"`
	// The unique identifier of a service instance.
	Name *string `json:"name" tf:"name"`
	// The endpoint path to health check against
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// Port number to connect to for the health check
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// The number of retries to attempt in case of a timeout before marking the origin as unhealthy
	// +optional
	Retries *int64 `json:"retries,omitempty" tf:"retries"`
	// The timeout (in seconds) before marking the health check as failed
	// +optional
	Timeout *int64 `json:"timeout,omitempty" tf:"timeout"`
	// The protocol to use for the health check
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type GlbMonitorStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GlbMonitorList is a list of GlbMonitors
type GlbMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of GlbMonitor CRD objects
	Items []GlbMonitor `json:"items,omitempty"`
}
