/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type App struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppSpec   `json:"spec,omitempty"`
	Status            AppStatus `json:"status,omitempty"`
}

type AppSpec struct {
	State *AppSpecResource `json:"state,omitempty" tf:"-"`

	Resource AppSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type AppSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Define the  path of the zip file of the application.
	AppPath *string `json:"appPath" tf:"app_path"`
	// Version of the application
	// +optional
	AppVersion *string `json:"appVersion,omitempty" tf:"app_version"`
	// Buildpack to build the app. 3 options: a) Blank means autodetection; b) A Git Url pointing to a buildpack; c) Name of an installed buildpack.
	// +optional
	Buildpack *string `json:"buildpack,omitempty" tf:"buildpack"`
	// The initial command for the app
	// +optional
	Command *string `json:"command,omitempty" tf:"command"`
	// The maximum amount of disk available to an instance of an app. In megabytes.
	// +optional
	DiskQuota *int64 `json:"diskQuota,omitempty" tf:"disk_quota"`
	// Key/value pairs of all the environment variables to run in your app. Does not include any system or service variables.
	// +optional
	EnvironmentJSON map[string]string `json:"environmentJSON,omitempty" tf:"environment_json"`
	// Endpoint called to determine if the app is healthy.
	// +optional
	HealthCheckHTTPEndpoint *string `json:"healthCheckHTTPEndpoint,omitempty" tf:"health_check_http_endpoint"`
	// Timeout in seconds for health checking of an staged app when starting up.
	// +optional
	HealthCheckTimeout *int64 `json:"healthCheckTimeout,omitempty" tf:"health_check_timeout"`
	// Type of health check to perform.
	// +optional
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type"`
	// The number of instances
	// +optional
	Instances *int64 `json:"instances,omitempty" tf:"instances"`
	// The amount of memory each instance should have. In megabytes.
	// +optional
	Memory *int64 `json:"memory,omitempty" tf:"memory"`
	// The name for the app
	Name *string `json:"name" tf:"name"`
	// Define the route guids which should be bound to the application.
	// +optional
	RouteGuid []string `json:"routeGuid,omitempty" tf:"route_guid"`
	// Define the service instance guids that should be bound to this application.
	// +optional
	ServiceInstanceGuid []string `json:"serviceInstanceGuid,omitempty" tf:"service_instance_guid"`
	// Define space guid to which app belongs
	SpaceGuid *string `json:"spaceGuid" tf:"space_guid"`
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Define timeout to wait for the app instances to start/update/restage etc.
	// +optional
	WaitTimeMinutes *int64 `json:"waitTimeMinutes,omitempty" tf:"wait_time_minutes"`
}

type AppStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AppList is a list of Apps
type AppList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of App CRD objects
	Items []App `json:"items,omitempty"`
}
