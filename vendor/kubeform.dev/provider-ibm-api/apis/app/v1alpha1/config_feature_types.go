/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ConfigFeature struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigFeatureSpec   `json:"spec,omitempty"`
	Status            ConfigFeatureStatus `json:"status,omitempty"`
}

type ConfigFeatureSpecCollections struct {
	// Collection id.
	CollectionID *string `json:"collectionID" tf:"collection_id"`
}

type ConfigFeatureSpecSegmentRulesRules struct {
	// List of segment ids that are used for targeting using the rule.
	Segments []string `json:"segments" tf:"segments"`
}

type ConfigFeatureSpecSegmentRules struct {
	// Order of the rule, used during evaluation. The evaluation is performed in the order defined and the value associated with the first matching rule is used for evaluation.
	Order *int64 `json:"order" tf:"order"`
	// Rules array.
	Rules []ConfigFeatureSpecSegmentRulesRules `json:"rules" tf:"rules"`
	// Value to be used for evaluation for this rule. The value can be Boolean, String or a Numeric value as per the `type` attribute.
	Value *string `json:"value" tf:"value"`
}

type ConfigFeatureSpec struct {
	State *ConfigFeatureSpecResource `json:"state,omitempty" tf:"-"`

	Resource ConfigFeatureSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ConfigFeatureSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// List of collection id representing the collections that are associated with the specified feature flag.
	// +optional
	Collections []ConfigFeatureSpecCollections `json:"collections,omitempty" tf:"collections"`
	// Creation time of the feature flag.
	// +optional
	CreatedTime *string `json:"createdTime,omitempty" tf:"created_time"`
	// Feature description.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Value of the feature when it is disabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type` attribute.
	DisabledValue *string `json:"disabledValue" tf:"disabled_value"`
	// The state of the feature flag.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// Value of the feature when it is enabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type` attribute.
	EnabledValue *string `json:"enabledValue" tf:"enabled_value"`
	// Environment Id.
	EnvironmentID *string `json:"environmentID" tf:"environment_id"`
	// Feature id.
	FeatureID *string `json:"featureID" tf:"feature_id"`
	// GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
	Guid *string `json:"guid" tf:"guid"`
	// Feature flag URL.
	// +optional
	Href *string `json:"href,omitempty" tf:"href"`
	// Feature name.
	Name *string `json:"name" tf:"name"`
	// Denotes if the targeting rules are specified for the feature flag.
	// +optional
	SegmentExists *bool `json:"segmentExists,omitempty" tf:"segment_exists"`
	// Specify the targeting rules that is used to set different feature flag values for different segments.
	// +optional
	SegmentRules []ConfigFeatureSpecSegmentRules `json:"segmentRules,omitempty" tf:"segment_rules"`
	// Tags associated with the feature.
	// +optional
	Tags *string `json:"tags,omitempty" tf:"tags"`
	// Type of the feature (BOOLEAN, STRING, NUMERIC).
	Type *string `json:"type" tf:"type"`
	// Last modified time of the feature flag data.
	// +optional
	UpdatedTime *string `json:"updatedTime,omitempty" tf:"updated_time"`
}

type ConfigFeatureStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ConfigFeatureList is a list of ConfigFeatures
type ConfigFeatureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ConfigFeature CRD objects
	Items []ConfigFeature `json:"items,omitempty"`
}
