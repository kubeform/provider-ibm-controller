/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Key struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeySpec   `json:"spec,omitempty"`
	Status            KeyStatus `json:"status,omitempty"`
}

type KeySpecPoliciesDualAuthDelete struct {
	// The unique identifier for the resource that created the policy.
	// +optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by"`
	// The date the policy was created. The date format follows RFC 3339.
	// +optional
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date"`
	// Cloud Resource Name (CRN) that uniquely identifies your cloud resources.
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// If set to true, Key Protect enables a dual authorization policy on a single key.
	Enabled *bool `json:"enabled" tf:"enabled"`
	// The v4 UUID used to uniquely identify the policy resource, as specified by RFC 4122.
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// Updates when the policy is replaced or modified. The date format follows RFC 3339.
	// +optional
	LastUpdateDate *string `json:"lastUpdateDate,omitempty" tf:"last_update_date"`
	// The unique identifier for the resource that updated the policy.
	// +optional
	UpdatedBy *string `json:"updatedBy,omitempty" tf:"updated_by"`
}

type KeySpecPoliciesRotation struct {
	// The unique identifier for the resource that created the policy.
	// +optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by"`
	// The date the policy was created. The date format follows RFC 3339.
	// +optional
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date"`
	// Cloud Resource Name (CRN) that uniquely identifies your cloud resources.
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// The v4 UUID used to uniquely identify the policy resource, as specified by RFC 4122.
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// Specifies the key rotation time interval in months
	IntervalMonth *int64 `json:"intervalMonth" tf:"interval_month"`
	// Updates when the policy is replaced or modified. The date format follows RFC 3339.
	// +optional
	LastUpdateDate *string `json:"lastUpdateDate,omitempty" tf:"last_update_date"`
	// The unique identifier for the resource that updated the policy.
	// +optional
	UpdatedBy *string `json:"updatedBy,omitempty" tf:"updated_by"`
}

type KeySpecPolicies struct {
	// Data associated with the dual authorization delete policy.
	// +optional
	DualAuthDelete []KeySpecPoliciesDualAuthDelete `json:"dualAuthDelete,omitempty" tf:"dual_auth_delete"`
	// Specifies the key rotation time interval in months, with a minimum of 1, and a maximum of 12
	// +optional
	Rotation []KeySpecPoliciesRotation `json:"rotation,omitempty" tf:"rotation"`
}

type KeySpec struct {
	State *KeySpecResource `json:"state,omitempty" tf:"-"`

	Resource KeySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type KeySpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Crn of the key
	// +optional
	Crn *string `json:"crn,omitempty" tf:"crn"`
	// Only for imported root key
	// +optional
	EncryptedNonce *string `json:"encryptedNonce,omitempty" tf:"encrypted_nonce"`
	// public or private
	// +optional
	EndpointType *string `json:"endpointType,omitempty" tf:"endpoint_type"`
	// The date the key material expires. The date format follows RFC 3339. You can set an expiration date on any key on its creation. A key moves into the Deactivated state within one hour past its expiration date, if one is assigned. If you create a key without specifying an expiration date, the key does not expire
	// +optional
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date"`
	// set to true to force delete the key
	// +optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete"`
	// Key protect or hpcs instance GUID
	InstanceID *string `json:"instanceID" tf:"instance_id"`
	// Only for imported root key
	// +optional
	IvValue *string `json:"ivValue,omitempty" tf:"iv_value"`
	// Key ID
	// +optional
	KeyID *string `json:"keyID,omitempty" tf:"key_id"`
	// Key name
	KeyName *string `json:"keyName" tf:"key_name"`
	// Key Ring for the Key
	// +optional
	KeyRingID *string `json:"keyRingID,omitempty" tf:"key_ring_id"`
	// +optional
	Payload *string `json:"payload,omitempty" tf:"payload"`
	// Creates or updates one or more policies for the specified key
	// +optional
	Policies *KeySpecPolicies `json:"policies,omitempty" tf:"policies"`
	// The URL of the IBM Cloud dashboard that can be used to explore and view details about the resource
	// +optional
	ResourceControllerURL *string `json:"resourceControllerURL,omitempty" tf:"resource_controller_url"`
	// The crn of the resource
	// +optional
	ResourceCrn *string `json:"resourceCrn,omitempty" tf:"resource_crn"`
	// The resource group name in which resource is provisioned
	// +optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name"`
	// The name of the resource
	// +optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name"`
	// The status of the resource
	// +optional
	ResourceStatus *string `json:"resourceStatus,omitempty" tf:"resource_status"`
	// Standard key type
	// +optional
	StandardKey *bool `json:"standardKey,omitempty" tf:"standard_key"`
	// type of service hs-crypto or kms
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type KeyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// KeyList is a list of Keys
type KeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Key CRD objects
	Items []Key `json:"items,omitempty"`
}
