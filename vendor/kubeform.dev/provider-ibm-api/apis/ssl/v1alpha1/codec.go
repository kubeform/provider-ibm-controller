/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecAdministrativeContact{}).Type1()):   CertificateSpecAdministrativeContactCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecBillingContact{}).Type1()):          CertificateSpecBillingContactCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecOrganizationInformation{}).Type1()): CertificateSpecOrganizationInformationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecTechnicalContact{}).Type1()):        CertificateSpecTechnicalContactCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecAdministrativeContact{}).Type1()):   CertificateSpecAdministrativeContactCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecBillingContact{}).Type1()):          CertificateSpecBillingContactCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecOrganizationInformation{}).Type1()): CertificateSpecOrganizationInformationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecTechnicalContact{}).Type1()):        CertificateSpecTechnicalContactCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type CertificateSpecAdministrativeContactCodec struct {
}

func (CertificateSpecAdministrativeContactCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*CertificateSpecAdministrativeContact)(ptr) == nil
}

func (CertificateSpecAdministrativeContactCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*CertificateSpecAdministrativeContact)(ptr)
	var objs []CertificateSpecAdministrativeContact
	if obj != nil {
		objs = []CertificateSpecAdministrativeContact{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecAdministrativeContact{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (CertificateSpecAdministrativeContactCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*CertificateSpecAdministrativeContact)(ptr) = CertificateSpecAdministrativeContact{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []CertificateSpecAdministrativeContact

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecAdministrativeContact{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*CertificateSpecAdministrativeContact)(ptr) = objs[0]
			} else {
				*(*CertificateSpecAdministrativeContact)(ptr) = CertificateSpecAdministrativeContact{}
			}
		} else {
			*(*CertificateSpecAdministrativeContact)(ptr) = CertificateSpecAdministrativeContact{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj CertificateSpecAdministrativeContact

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecAdministrativeContact{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*CertificateSpecAdministrativeContact)(ptr) = obj
		} else {
			*(*CertificateSpecAdministrativeContact)(ptr) = CertificateSpecAdministrativeContact{}
		}
	default:
		iter.ReportError("decode CertificateSpecAdministrativeContact", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type CertificateSpecBillingContactCodec struct {
}

func (CertificateSpecBillingContactCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*CertificateSpecBillingContact)(ptr) == nil
}

func (CertificateSpecBillingContactCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*CertificateSpecBillingContact)(ptr)
	var objs []CertificateSpecBillingContact
	if obj != nil {
		objs = []CertificateSpecBillingContact{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecBillingContact{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (CertificateSpecBillingContactCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*CertificateSpecBillingContact)(ptr) = CertificateSpecBillingContact{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []CertificateSpecBillingContact

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecBillingContact{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*CertificateSpecBillingContact)(ptr) = objs[0]
			} else {
				*(*CertificateSpecBillingContact)(ptr) = CertificateSpecBillingContact{}
			}
		} else {
			*(*CertificateSpecBillingContact)(ptr) = CertificateSpecBillingContact{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj CertificateSpecBillingContact

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecBillingContact{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*CertificateSpecBillingContact)(ptr) = obj
		} else {
			*(*CertificateSpecBillingContact)(ptr) = CertificateSpecBillingContact{}
		}
	default:
		iter.ReportError("decode CertificateSpecBillingContact", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type CertificateSpecOrganizationInformationCodec struct {
}

func (CertificateSpecOrganizationInformationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*CertificateSpecOrganizationInformation)(ptr) == nil
}

func (CertificateSpecOrganizationInformationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*CertificateSpecOrganizationInformation)(ptr)
	var objs []CertificateSpecOrganizationInformation
	if obj != nil {
		objs = []CertificateSpecOrganizationInformation{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecOrganizationInformation{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (CertificateSpecOrganizationInformationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*CertificateSpecOrganizationInformation)(ptr) = CertificateSpecOrganizationInformation{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []CertificateSpecOrganizationInformation

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecOrganizationInformation{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*CertificateSpecOrganizationInformation)(ptr) = objs[0]
			} else {
				*(*CertificateSpecOrganizationInformation)(ptr) = CertificateSpecOrganizationInformation{}
			}
		} else {
			*(*CertificateSpecOrganizationInformation)(ptr) = CertificateSpecOrganizationInformation{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj CertificateSpecOrganizationInformation

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecOrganizationInformation{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*CertificateSpecOrganizationInformation)(ptr) = obj
		} else {
			*(*CertificateSpecOrganizationInformation)(ptr) = CertificateSpecOrganizationInformation{}
		}
	default:
		iter.ReportError("decode CertificateSpecOrganizationInformation", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type CertificateSpecTechnicalContactCodec struct {
}

func (CertificateSpecTechnicalContactCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*CertificateSpecTechnicalContact)(ptr) == nil
}

func (CertificateSpecTechnicalContactCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*CertificateSpecTechnicalContact)(ptr)
	var objs []CertificateSpecTechnicalContact
	if obj != nil {
		objs = []CertificateSpecTechnicalContact{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecTechnicalContact{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (CertificateSpecTechnicalContactCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*CertificateSpecTechnicalContact)(ptr) = CertificateSpecTechnicalContact{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []CertificateSpecTechnicalContact

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecTechnicalContact{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*CertificateSpecTechnicalContact)(ptr) = objs[0]
			} else {
				*(*CertificateSpecTechnicalContact)(ptr) = CertificateSpecTechnicalContact{}
			}
		} else {
			*(*CertificateSpecTechnicalContact)(ptr) = CertificateSpecTechnicalContact{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj CertificateSpecTechnicalContact

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CertificateSpecTechnicalContact{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*CertificateSpecTechnicalContact)(ptr) = obj
		} else {
			*(*CertificateSpecTechnicalContact)(ptr) = CertificateSpecTechnicalContact{}
		}
	default:
		iter.ReportError("decode CertificateSpecTechnicalContact", "unexpected JSON type")
	}
}
